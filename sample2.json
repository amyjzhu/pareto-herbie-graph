{"branch":"main","commit":"ee04f6d1947f0c3a8eb63ae9fad6ff3b11a183fc","date":1661763827,"flags":["rules:arithmetic","rules:polynomials","rules:fractions","rules:exponents","rules:trigonometry","rules:hyperbolic","rules:numerics","rules:special","rules:bools","rules:branches","generate:rr","generate:taylor","generate:simplify","reduce:regimes","reduce:avg-error","reduce:binary-search","reduce:branch-expressions","setup:simplify","setup:search"],"hostname":"warfa","iterations":4,"note":"hamming","points":256,"seed":"2022241","tests":[{"bits":128,"conversions":[],"cost-accuracy":"((19776 40.61538210758914) (13184 0.0395) ((12992 0.0375 (sqrt (+ 1.0 (exp x)))) (6464 18.12037342712402 (sqrt 2.0))))","end":0.0395,"end-est":0.015625,"identifier":"#f","input":"(sqrt (/ (- (exp (* 2.0 x)) 1.0) (- (exp x) 1.0)))","link":"0-sqrtexpproblem344","name":"sqrtexp (problem 3.4.4)","output":"(pow (/ 1.0 (+ 1.0 (exp x))) -0.5)","pre":"TRUE","prec":"binary64","preprocess":"()","spec":"(sqrt (/ (- (exp (* 2.0 x)) 1.0) (- (exp x) 1.0)))","start":40.61538210758914,"start-est":39.68056425651253,"status":"imp-start","target":false,"target-prog":"#f","time":8872.716552734375,"vars":["x"]},{"bits":128,"conversions":[],"cost-accuracy":"((13248 31.90409334887062) (19976 0.3661974484640224) ((13512 0.6962273987045279 (if (<= x -18123.010022165137) (+ 1.0 (/ (- (tan x) (sin x)) x)) (if (<= x 4.445858959084402e-5) (+ (* (* x x) (+ (* x (* x -0.009642857142857142)) 0.225)) -0.5) (+ 1.0 (/ (- (tan x) (sin x)) x))))) (13512 0.36372134561895914 (if (<= x -18123.010022165137) (/ (- x (sin x)) (- x (tan x))) (if (<= x 4.445858959084402e-5) (+ (* (* x x) (+ (* x (* x -0.009642857142857142)) 0.225)) -0.5) (/ (- x (sin x)) (- x (tan x)))))) (7108 1.0127982597045242 (if (<= x -18123.010022165137) (+ (+ (/ x (- x (tan x))) 2.0) -2.0) (if (<= x 4.445858959084402e-5) (+ (* (* x x) (+ (* x (* x -0.009642857142857142)) 0.225)) -0.5) 1.0))) (6980 1.012761238893453 (if (<= x -18123.010022165137) (/ 1.0 (/ (- x (tan x)) x)) (if (<= x 4.445858959084402e-5) (+ (* (* x x) (+ (* x (* x -0.009642857142857142)) 0.225)) -0.5) 1.0))) (6852 1.0126154246167904 (if (<= x -18123.010022165137) (/ x (- x (tan x))) (if (<= x 4.445858959084402e-5) (+ (* (* x x) (+ (* x (* x -0.009642857142857142)) 0.225)) -0.5) 1.0))) (1096 1.0186486952960208 (if (<= x -18123.010022165137) 1.0 (if (<= x 4.445858959084402e-5) (+ (* (* x x) (+ (* x (* x -0.009642857142857142)) 0.225)) -0.5) 1.0))) (712 1.0231637346444424 (if (<= x -18123.010022165137) 1.0 (if (<= x 4.445858959084402e-5) (+ (* (* x x) 0.225) -0.5) 1.0))) (328 1.1822658871112028 (if (<= x -18123.010022165137) 1.0 (if (<= x 4.445858959084402e-5) -0.5 1.0))) (64 32.59066397595022 1.0)))","end":0.3661974484640224,"end-est":0.0078125,"identifier":"#f","input":"(/ (- x (sin x)) (- x (tan x)))","link":"1-sintanproblem345","name":"sintan (problem 3.4.5)","output":"(if (<= x -18123.010022165137) (pow (/ (- x (tan x)) (- x (sin x))) -1.0) (if (<= x 4.445858959084402e-5) (+ (* (* x x) (+ (* x (* x -0.009642857142857142)) 0.225)) -0.5) (pow (/ (- x (tan x)) (- x (sin x))) -1.0)))","pre":"TRUE","prec":"binary64","preprocess":"()","spec":"(/ (- x (sin x)) (- x (tan x)))","start":31.90409334887062,"start-est":31.106748919346707,"status":"imp-start","target":false,"target-prog":"#f","time":21460.2470703125,"vars":["x"]},{"bits":128,"conversions":[],"cost-accuracy":"((7168 33.66902514688502) (7368 10.328660050980204) ((7176 14.62566193510123 (if (<= b_2 -6200000000000.0) (+ (* -2.0 (/ b_2 a)) (* 0.5 (/ c b_2))) (if (<= b_2 1.8e-43) (/ (- (sqrt (* a (- c))) b_2) a) (/ (* c -0.5) b_2)))) (452 37.0096096773852 (if (<= b_2 1.4e-289) (/ b_2 (- a)) (/ (* c -0.5) b_2))) (452 22.851444985428135 (if (<= b_2 1.4e-289) (/ (* b_2 -2.0) a) (/ (* c -0.5) b_2))) (388 53.372337643118904 (if (<= b_2 1.22e-263) (/ b_2 (- a)) (/ 0.0 a))) (192 56.47482275021733 (/ 0.0 a))))","end":10.328660050980204,"end-est":9.858325899824488,"identifier":"#f","input":"(/ (+ (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)","link":"2-quad2pproblem321positive","name":"quad2p (problem 3.2.1, positive)","output":"(if (<= b_2 -1e+155) (+ (* -2.0 (/ b_2 a)) (* 0.5 (/ c b_2))) (if (<= b_2 7e-25) (/ (- (sqrt (- (* b_2 b_2) (* a c))) b_2) a) (/ (* c -0.5) b_2)))","pre":"TRUE","prec":"binary64","preprocess":"()","spec":"(/ (+ (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)","start":33.66902514688502,"start-est":35.163336063679495,"status":"imp-start","target":false,"target-prog":"#f","time":16353.72021484375,"vars":["a","b_2","c"]},{"bits":128,"conversions":[],"cost-accuracy":"((7168 34.498163505740465) (7432 9.983422613719094) ((7240 13.258622998299046 (if (<= b_2 -7.2e-75) (* -0.5 (/ c b_2)) (if (<= b_2 2.8e-80) (/ (- (- b_2) (sqrt (* c (- a)))) a) (+ (* -2.0 (/ b_2 a)) (* (/ c b_2) 0.5))))) (452 53.75130173411376 (if (<= b_2 -1.4510909377111377e+60) (* (/ c b_2) 0.5) (/ (- b_2) a))) (452 40.40400797760352 (if (<= b_2 -1.4510909377111377e+60) (* (/ c b_2) 0.5) (* b_2 (/ -2.0 a)))) (452 40.399764544754255 (if (<= b_2 -1.4510909377111377e+60) (* (/ c b_2) 0.5) (/ -2.0 (/ a b_2)))) (452 22.565597393197667 (if (<= b_2 -2e-207) (* -0.5 (/ c b_2)) (/ -2.0 (/ a b_2)))) (452 22.49890829348631 (if (<= b_2 -2e-207) (* -0.5 (/ c b_2)) (/ (* b_2 -2.0) a))) (256 59.37044710412673 (/ (- b_2) a)) (192 62.338882290520004 (/ b_2 a))))","end":9.983422613719094,"end-est":6.807585099173329,"identifier":"#f","input":"(/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)","link":"3-quad2mproblem321negative","name":"quad2m (problem 3.2.1, negative)","output":"(if (<= b_2 -7.2e-75) (* -0.5 (/ c b_2)) (if (<= b_2 1.16e+90) (/ (- (- b_2) (sqrt (- (* b_2 b_2) (* c a)))) a) (/ (* b_2 -2.0) a)))","pre":"TRUE","prec":"binary64","preprocess":"()","spec":"(/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)","start":34.498163505740465,"start-est":35.08529745381282,"status":"imp-start","target":false,"target-prog":"#f","time":16764.068115234375,"vars":["a","b_2","c"]},{"bits":128,"conversions":[],"cost-accuracy":"((6848 31.545584412481592) (13376 0.12456654219390034) ((7304 0.9367325572755885 (if (<= x -108197986.31980906) (/ (/ (- 1.0 (cos x)) x) x) (if (<= x 0.00010736944078007438) (fma x (* x -0.041666666666666664) 0.5) (* (- 1.0 (cos x)) (/ -1.0 (* x (- x))))))) (7112 0.758160012048377 (if (<= x -108197986.31980906) (/ (/ (- 1.0 (cos x)) x) x) (if (<= x 0.00010736944078007438) (fma x (* x -0.041666666666666664) 0.5) (/ (/ (- 1.0 (cos x)) x) x)))) (7112 0.9305352015001458 (if (<= x -108197986.31980906) (/ (/ (- 1.0 (cos x)) x) x) (if (<= x 0.00010736944078007438) (fma x (* x -0.041666666666666664) 0.5) (/ (- 1.0 (cos x)) (* x x))))) (6984 15.896172239680814 (if (<= x -108197986.31980906) 0.0 (if (<= x 0.00010736944078007438) (fma x (* x -0.041666666666666664) 0.5) 0.0))) (328 15.715798281163107 (if (<= x -3.0335866107630155e+79) 0.0 (if (<= x 3.3060147322857944e+71) 0.5 0.0))) (64 46.639259613727056 0.0)))","end":0.12456654219390034,"end-est":0.09994125976844201,"identifier":"#f","input":"(/ (- 1.0 (cos x)) (* x x))","link":"4-cos2problem341","name":"cos2 (problem 3.4.1)","output":"(* (/ (tan (* x 0.5)) x) (/ (sin x) x))","pre":"TRUE","prec":"binary64","preprocess":"()","spec":"(/ (- 1.0 (cos x)) (* x x))","start":31.545584412481592,"start-est":35.56691118938834,"status":"imp-start","target":false,"target-prog":"#f","time":12936.689697265625,"vars":["x"]},{"bits":128,"conversions":[],"cost-accuracy":"((13504 32.611975208843965) (13380 7.033318264815823) ((7172 7.036996508817542 (if (<= x 240000.0) (/ (log (/ (+ x 1.0) x)) n) (* (/ 1.0 n) (/ (pow x (/ 1.0 n)) x)))) (7044 7.442719943127354 (if (<= x 240000.0) (/ (log (/ (+ x 1.0) x)) n) (/ (pow x (/ 1.0 n)) (* x n)))) (6980 16.41771903840813 (if (<= x 0.95) (/ 1.0 (- 0.5 (/ n (log x)))) (if (<= x 5.2e+63) (+ (/ (/ 1.0 x) n) (* (/ (/ 1.0 (* x x)) n) (- -0.5 (- (/ (/ 0.25 x) x) (/ 0.3333333333333333 x))))) (if (<= x 4e+172) (/ 0.0 n) (if (<= x 1.5e+226) (/ (/ 1.0 n) x) (/ 0.0 n)))))) (6980 16.908133901037157 (if (<= x 230000.0) (/ (log (/ (+ x 1.0) x)) n) (if (<= x 5.2e+63) (/ (+ (/ 1.0 x) (/ -0.5 (* x x))) n) (if (<= x 4e+172) (/ 0.0 n) (if (<= x 1.5e+226) (/ (/ 1.0 n) x) (/ 0.0 n)))))) (6852 18.870122182256708 (if (<= x 240000.0) (/ (- x (log x)) n) (if (<= x 4e+172) (/ 0.0 n) (if (<= x 1.5e+226) (/ (/ 1.0 n) x) (/ 0.0 n))))) (6788 17.381913802291525 (if (<= x 0.7) (/ (- (log x)) n) (if (<= x 5.2e+63) (+ (/ (/ 1.0 x) n) (* (/ (/ 1.0 (* x x)) n) (- -0.5 (- (/ (/ 0.25 x) x) (/ 0.3333333333333333 x))))) (if (<= x 4e+172) (/ 0.0 n) (if (<= x 1.5e+226) (/ (/ 1.0 n) x) (/ 0.0 n)))))) (836 35.08761970990598 (if (<= (/ 1.0 n) -500000000.0) (+ (+ 1.0 (/ 1.0 (* x n))) -1.0) (/ (/ 1.0 n) x))) (584 28.820451286644133 (if (<= n -0.85) (/ (/ 1.0 n) x) (if (<= n 4e-64) (/ 0.0 n) (/ (/ 1.0 n) x)))) (320 40.101582593940364 (/ (/ 1.0 n) x)) (192 61.027515078603436 (/ x n))))","end":7.033318264815823,"end-est":5.674157601638687,"identifier":"#f","input":"(- (pow (+ x 1.0) (/ 1.0 n)) (pow x (/ 1.0 n)))","link":"5-2nthrtproblem346","name":"2nthrt (problem 3.4.6)","output":"(if (<= x 240000.0) (- (/ (log1p x) n) (/ (log x) n)) (* (/ 1.0 n) (/ (pow x (/ 1.0 n)) x)))","pre":"TRUE","prec":"binary64","preprocess":"()","spec":"(- (pow (+ x 1.0) (/ 1.0 n)) (pow x (/ 1.0 n)))","start":32.611975208843965,"start-est":31.879600613809995,"status":"imp-start","target":false,"target-prog":"#f","time":45793.74072265625,"vars":["x","n"]},{"bits":128,"conversions":[],"cost-accuracy":"((13120 29.800644809857975) (26180 0.07669198332606621) ((7812 0.056875726026090256 (if (<= N 151.14217374961237) (log (/ (+ N 1.0) N)) (+ (/ 1.0 N) (+ (/ -0.5 (* N N)) (* (/ 1.0 (pow N 3.0)) (+ (/ -0.25 N) 0.3333333333333333)))))) (7300 0.09836474528292312 (if (<= N 151.14217374961237) (log (/ (+ N 1.0) N)) (+ (/ 0.3333333333333333 (pow N 3.0)) (/ (+ 1.0 (/ -0.5 N)) N)))) (6852 0.1087387489257692 (if (<= N 89853.75513003954) (log (/ (+ N 1.0) N)) (/ (+ 1.0 (/ -0.5 N)) N))) (6724 0.8762414067890316 (if (<= N 1.873065687352931e-5) (- N (log N)) (/ (+ 1.0 (/ -0.5 N)) N))) (6660 1.1062854486488867 (if (<= N 1.873065687352931e-5) (- (log N)) (/ (+ 1.0 (/ -0.5 N)) N))) (192 30.503552971906913 (/ 1.0 N)) (64 61.06385961789268 N)))","end":0.07669198332606621,"end-est":0.03323357281327616,"identifier":"#f","input":"(- (log (+ N 1.0)) (log N))","link":"6-2logproblem336","name":"2log (problem 3.3.6)","output":"(if (<= (- (log (+ N 1.0)) (log N)) 2e-5) (+ (/ 1.0 N) (+ (/ -0.5 (* N N)) (* (/ 1.0 (pow N 3.0)) (+ (/ -0.25 N) 0.3333333333333333)))) (- (log1p N) (log N)))","pre":"TRUE","prec":"binary64","preprocess":"()","spec":"(- (log (+ N 1.0)) (log N))","start":29.800644809857975,"start-est":29.480387401420764,"status":"imp-start","target":false,"target-prog":"#f","time":11988.043701171875,"vars":["N"]},{"bits":128,"conversions":[],"cost-accuracy":"((576 14.108342030477099) (576 0.13271240625180292) ((584 1.6994764252645105 (if (<= x -174454.15443876295) (/ -1.0 (* x x)) (if (<= x 0.42581051448337254) (/ -1.0 x) (/ -1.0 (* x x))))) (584 1.427770233167284 (if (<= x -174454.15443876295) (/ -1.0 (* x x)) (if (<= x 0.42581051448337254) (+ 1.0 (/ -1.0 x)) (/ -1.0 (* x x))))) (584 1.1437856135731468 (if (<= x -174454.15443876295) (/ (/ -1.0 x) x) (if (<= x 0.42581051448337254) (+ 1.0 (/ -1.0 x)) (/ (/ -1.0 x) x)))) (448 0.3595012476467561 (/ 1.0 (* x (- -1.0 x)))) (192 30.418672668542147 (/ -1.0 x))))","end":0.13271240625180292,"end-est":0.14357377930532605,"identifier":"#f","input":"(- (/ 1.0 (+ x 1.0)) (/ 1.0 x))","link":"7-2fracproblem331","name":"2frac (problem 3.3.1)","output":"(* (/ 1.0 x) (/ 1.0 (- -1.0 x)))","pre":"TRUE","prec":"binary64","preprocess":"()","spec":"(- (/ 1.0 (+ x 1.0)) (/ 1.0 x))","start":14.108342030477099,"start-est":14.831389054857747,"status":"imp-start","target":false,"target-prog":"#f","time":6285.7421875,"vars":["x"]},{"bits":128,"conversions":[],"cost-accuracy":"((13120 39.75522806373871) (32768 0.30974532978524544) ((32776 0.6613480358034716 (if (<= x -2.78070083094747e-5) (fma (- (sin x)) (sin eps) (* (cos x) (+ (cos eps) -1.0))) (if (<= x 7.6e-59) (* (sin (* eps 0.5)) (+ (* (cos (* eps 0.5)) (* x -2.0)) (* (sin (* eps 0.5)) (+ -2.0 (* x x))))) (fma (+ (cos eps) -1.0) (cos x) (* (sin eps) (- (sin x))))))) (32644 0.6666947931421919 (if (<= x -2.78070083094747e-5) (fma (- (sin x)) (sin eps) (* (cos x) (+ (cos eps) -1.0))) (if (<= x 7.6e-59) (* (sin (* eps 0.5)) (+ (* (cos (* eps 0.5)) (* x -2.0)) (* (sin (* eps 0.5)) (+ -2.0 (* x x))))) (- (* (cos x) (+ (cos eps) -1.0)) (* (sin eps) (sin x)))))) (26440 0.6711701685349323 (if (<= x -2.78070083094747e-5) (- (* (cos x) (+ (cos eps) -1.0)) (* (sin eps) (sin x))) (if (<= x 7.6e-59) (* (sin (* eps 0.5)) (+ (* (cos (* eps 0.5)) (* x -2.0)) (* (sin (* eps 0.5)) (+ -2.0 (* x x))))) (- (* (cos x) (+ (cos eps) -1.0)) (* (sin eps) (sin x)))))) (13888 15.708351755692252 (* -2.0 (* (sin (* 0.5 (+ eps (- x x)))) (sin (* 0.5 (+ x (+ x eps))))))) (13768 15.773096488752461 (if (<= eps -0.000780978539432837) (* -2.0 (pow (sin (* eps 0.5)) 2.0)) (if (<= eps 3.4305134080318123e-12) (- (* eps (* eps (* (cos x) -0.5))) (* eps (sin x))) (- (cos eps) (cos x))))) (13640 15.77335385045987 (if (<= eps -0.000780978539432837) (* -2.0 (pow (sin (* eps 0.5)) 2.0)) (if (<= eps 3.4305134080318123e-12) (* eps (- (* -0.5 (* (cos x) eps)) (sin x))) (- (cos eps) (cos x))))) (13448 22.079073393974014 (if (<= x -1.8123646741333353e-53) (* (sin x) (- eps)) (if (<= x 5.145427560418239e-96) (* -2.0 (pow (sin (* eps 0.5)) 2.0)) (* (sin x) (- eps))))) (13388 22.033076366384595 (if (<= eps -0.000780978539432837) (- (cos eps) (cos x)) (if (<= eps 1.8483636269241238e-112) (* (sin x) (- eps)) (if (<= eps 3.4305134080318123e-12) (* -0.5 (* eps eps)) (- (cos eps) (cos x)))))) (7120 32.80995871547471 (if (<= eps -2.8141323005393573e-9) (+ (cos eps) -1.0) (if (<= eps -1.6958076579829498e-137) (* -0.5 (* eps eps)) (if (<= eps 8.528562565058367e-153) (* x (- eps)) (if (<= eps 3.4305134080318123e-12) (* -0.5 (* eps eps)) (+ (cos eps) -1.0)))))) (6988 22.4906991497045 (if (<= eps -0.000780978539432837) (+ (cos eps) -1.0) (if (<= eps 1.8483636269241238e-112) (* (sin x) (- eps)) (if (<= eps 3.4305134080318123e-12) (* -0.5 (* eps eps)) (+ (cos eps) -1.0))))) (584 49.28431505558512 (if (<= eps -1.6958076579829498e-137) (* -0.5 (* eps eps)) (if (<= eps 8.528562565058367e-153) (* x (- eps)) (* -0.5 (* eps eps))))) (256 52.66005171473272 (* x (- eps))) (64 56.02867921033335 0.0)))","end":0.30974532978524544,"end-est":0.3057136021186022,"identifier":"#f","input":"(- (cos (+ x eps)) (cos x))","link":"8-2cosproblem335","name":"2cos (problem 3.3.5)","output":"(- (* (cos x) (* (tan (/ eps 2.0)) (- (sin eps)))) (* (sin eps) (sin x)))","pre":"TRUE","prec":"binary64","preprocess":"()","spec":"(- (cos (+ x eps)) (cos x))","start":39.75522806373871,"start-est":38.32466270481773,"status":"imp-start","target":false,"target-prog":"#f","time":25198.170654296875,"vars":["x","eps"]},{"bits":128,"conversions":[],"cost-accuracy":"((13120 30.10599326300972) (33152 0.5475021972219128) ((39108 25.266162925053344 (if (<= (- (cbrt (+ 1.0 x)) (cbrt x)) 0.0) (/ (+ 1.0 (- x x)) (+ 1.0 (* (cbrt x) (+ (cbrt (+ 1.0 x)) (cbrt x))))) (exp (log (- (cbrt (+ 1.0 x)) (cbrt x)))))) (33348 25.26624116838232 (if (<= (- (cbrt (+ 1.0 x)) (cbrt x)) 0.0) (/ (+ 1.0 (- x x)) (+ 1.0 (* (cbrt x) (+ (cbrt (+ 1.0 x)) (cbrt x))))) (- (cbrt (+ 1.0 x)) (cbrt x)))) (33220 13.867150985021315 (if (<= x -5.187031768266039) (/ (+ 1.0 (- x x)) (+ 1.0 (* (cbrt x) (+ (cbrt (+ 1.0 x)) (cbrt x))))) (/ (+ 1.0 (- x x)) (+ (* (cbrt x) (+ (cbrt (+ 1.0 x)) (cbrt x))) (exp (* 0.6666666666666666 (log1p x))))))) (33156 28.03486017162418 (if (<= (- (cbrt (+ 1.0 x)) (cbrt x)) 0.0) (/ (+ 1.0 (- x x)) (+ (cbrt x) (cbrt (pow (+ 1.0 x) 2.0)))) (- (cbrt (+ 1.0 x)) (cbrt x)))) (26884 13.8953854260169 (if (<= x -5.187031768266039) (/ (+ 1.0 (- x x)) (+ 1.0 (* (cbrt x) (+ (cbrt (+ 1.0 x)) (cbrt x))))) (/ (+ 1.0 (- x x)) (+ (* (cbrt x) (+ (cbrt (+ 1.0 x)) (cbrt x))) (pow (+ 1.0 x) 0.6666666666666666))))) (13120 30.10599326300972 (- (cbrt (+ 1.0 x)) (cbrt x))) (6592 31.829792757559673 (- 1.0 (cbrt x))) (64 61.66796487167573 0.0) (64 32.35282071716122 1.0)))","end":0.5475021972219128,"end-est":0.5637193230084894,"identifier":"#f","input":"(- (cbrt (+ x 1.0)) (cbrt x))","link":"9-2cbrtproblem334","name":"2cbrt (problem 3.3.4)","output":"(/ (+ 1.0 (- x x)) (+ (pow (cbrt (+ 1.0 x)) 2.0) (* (cbrt x) (+ (cbrt (+ 1.0 x)) (cbrt x)))))","pre":"TRUE","prec":"binary64","preprocess":"()","spec":"(- (cbrt (+ x 1.0)) (cbrt x))","start":30.10599326300972,"start-est":29.717268235619866,"status":"imp-start","target":false,"target-prog":"#f","time":13871.7548828125,"vars":["x"]},{"bits":128,"conversions":[],"cost-accuracy":"((13120 30.46662156255246) (6592 0.000375) ())","end":0.000375,"end-est":0,"identifier":"#f","input":"(/ (- 1.0 (cos x)) (sin x))","link":"10-tanhfexample34","name":"tanhf (example 3.4)","output":"(tan (/ x 2.0))","pre":"TRUE","prec":"binary64","preprocess":"()","spec":"(/ (- 1.0 (cos x)) (sin x))","start":30.46662156255246,"start-est":30.758326663251406,"status":"eq-target","target":0.000375,"target-prog":"(tan (/ x 2.0))","time":12557.206787109375,"vars":["x"]},{"bits":128,"conversions":[],"cost-accuracy":"((7424 33.83311284305584) (7624 10.390187433700955) ((7624 10.474374909242584 (if (<= b -5.2e+93) (- (/ c b) (/ b a)) (if (<= b 1.25e-168) (* (- (sqrt (+ (* b b) (* a (* c -4.0)))) b) (/ 0.5 a)) (/ (- c) b)))) (7368 13.849515531369482 (if (<= b -1.1e-36) (- (/ c b) (/ b a)) (if (<= b 1.25e-168) (/ (- (sqrt (* c (* a -4.0))) b) (* a 2.0)) (/ (- c) b)))) (388 22.275211098278287 (if (<= b 4e-284) (/ (- b) a) (/ (- c) b))) (256 40.30390266951596 (/ (- c) b)) (192 62.36658269425205 (/ b a))))","end":10.390187433700955,"end-est":8.868838098801955,"identifier":"#f","input":"(/ (+ (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))","link":"11-quadpp42positive","name":"quadp (p42, positive)","output":"(if (<= b -1e+155) (- (/ c b) (/ b a)) (if (<= b 1.25e-168) (/ (- (sqrt (- (* b b) (* 4.0 (* c a)))) b) (* a 2.0)) (/ (- c) b)))","pre":"TRUE","prec":"binary64","preprocess":"()","spec":"(/ (+ (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))","start":33.83311284305584,"start-est":36.35741091620089,"status":"gt-target","target":21.0823074728301,"target-prog":"(if (< b 0.0) (/ (+ (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a)) (/ c (* a (/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a)))))","time":15923.32275390625,"vars":["a","b","c"]},{"bits":128,"conversions":[],"cost-accuracy":"((7424 34.53976853735196) (7688 10.163913752236237) ((7432 13.635041044546533 (if (<= b -1e-62) (/ (- c) b) (if (<= b 6.5e-137) (/ (- (- b) (sqrt (* c (* a -4.0)))) (* a 2.0)) (/ (- b) a)))) (708 22.492852698802956 (if (<= b -9e-307) (/ 1.0 (- (/ a b) (/ b c))) (/ (- b) a))) (388 40.63744724062913 (if (<= b -1.2712654576858107e+62) (/ c b) (/ (- b) a))) (388 22.5239047734653 (if (<= b -8.8e-213) (/ (- c) b) (/ (- b) a))) (192 56.81837247311937 (/ c b))))","end":10.163913752236237,"end-est":8.833552954960947,"identifier":"#f","input":"(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))","link":"12-quadmp42negative","name":"quadm (p42, negative)","output":"(if (<= b -1e-62) (/ (- c) b) (if (<= b 1.62e+65) (/ (- (- b) (sqrt (+ (* b b) (* (* c a) -4.0)))) (* a 2.0)) (- (/ c b) (/ b a))))","pre":"TRUE","prec":"binary64","preprocess":"()","spec":"(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))","start":34.53976853735196,"start-est":36.09668244599186,"status":"gt-target","target":20.810658744413185,"target-prog":"(if (< b 0.0) (/ c (* a (/ (+ (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a)))) (/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a)))","time":16172.73046875,"vars":["a","b","c"]},{"bits":128,"conversions":[],"cost-accuracy":"((13248 61.527895112980964) (13056 0.020636842188131013) ((6848 0.45869632802153376 (fma x (* x -0.5) (- -1.0 x))) (192 0.6480798877513719 (- -1.0 x)) (64 1.2809610662203166 -1.0)))","end":0.020636842188131013,"end-est":0.030292529305326048,"identifier":"#f","input":"(/ (log (- 1.0 x)) (log (+ 1.0 x)))","link":"13-qlogexample310","name":"qlog (example 3.10)","output":"(/ (log1p (- x)) (log1p x))","pre":"(and (< -1.0 x) (< x 1.0))","prec":"binary64","preprocess":"()","spec":"(/ (log (- 1.0 x)) (log (+ 1.0 x)))","start":61.527895112980964,"start-est":61.5227979116403,"status":"eq-target","target":0.35129268814017484,"target-prog":"(- (+ (+ (+ 1.0 x) (/ (* x x) 2.0)) (* 0.4166666666666667 (pow x 3.0))))","time":9671.76171875,"vars":["x"]},{"bits":128,"conversions":[],"cost-accuracy":"((13632 63.005265575324124) (6720 0.000375) ((6592 44.19090672380436 (+ (log1p n) -1.0)) (192 60.77542056583622 (+ n -1.0)) (64 63.00437624038198 -1.0)))","end":0.000375,"end-est":0,"identifier":"#f","input":"(- (- (* (+ n 1.0) (log (+ n 1.0))) (* n (log n))) 1.0)","link":"14-logsexample38","name":"logs (example 3.8)","output":"(+ (log1p n) (/ -0.5 n))","pre":"(> n 6.8e+15)","prec":"binary64","preprocess":"()","spec":"(- (- (* (+ n 1.0) (log (+ n 1.0))) (* n (log n))) 1.0)","start":63.005265575324124,"start-est":63.01994363238265,"status":"eq-target","target":0,"target-prog":"(- (log (+ n 1.0)) (- (/ 1.0 (* 2.0 n)) (- (/ 1.0 (* 3.0 (* n n))) (/ 4.0 (pow n 3.0)))))","time":6265.296630859375,"vars":["n"]},{"bits":128,"conversions":[],"cost-accuracy":"((6848 58.585095690665376) (13312 0.00675) ((13056 0.0065 (- (log1p (- eps)) (log1p eps))) (704 0.3320408303704525 (+ (* eps (* (* eps eps) -0.6666666666666666)) (* eps -2.0))) (192 0.6719145230095714 (* eps -2.0))))","end":0.00675,"end-est":0.01171875,"identifier":"#f","input":"(log (/ (- 1.0 eps) (+ 1.0 eps)))","link":"15-logqproblem343","name":"logq (problem 3.4.3)","output":"(- (log1p (* eps (- eps))) (* 2.0 (log1p eps)))","pre":"TRUE","prec":"binary64","preprocess":"()","spec":"(log (/ (- 1.0 eps) (+ 1.0 eps)))","start":58.585095690665376,"start-est":58.10223754825824,"status":"eq-target","target":0.2194395899734211,"target-prog":"(* -2.0 (+ (+ eps (/ (pow eps 3.0) 3.0)) (/ (pow eps 5.0) 5.0)))","time":9531.07470703125,"vars":["eps"]},{"bits":128,"conversions":[],"cost-accuracy":"((6848 59.88608867699588) (19968 0.27029297423943566) ((14272 0.3020733475083465 (/ (* x (+ 0.037037037037037035 (* 1.0973936899862826e-5 (pow (* x x) 3.0)))) (+ (* 0.0004938271604938272 (pow x 4.0)) (+ 0.1111111111111111 (* (* x x) -0.007407407407407408))))) (7424 0.30207336384023853 (/ (* x 0.037037037037037035) (+ (* 0.0004938271604938272 (pow x 4.0)) (+ 0.1111111111111111 (* (* x x) -0.007407407407407408))))) (6976 0.31162274746868723 (/ (* x -0.1111111111111111) (fma 0.022222222222222223 (* x x) -0.3333333333333333))) (704 0.3799170111274362 (+ (* x (* 0.022222222222222223 (* x x))) (* x 0.3333333333333333))) (576 0.380537026267383 (* x (+ (* 0.022222222222222223 (* x x)) 0.3333333333333333))) (192 0.6606568088380321 (* x 0.3333333333333333))))","end":0.27029297423943566,"end-est":0.2902520425599013,"identifier":"#f","input":"(- (/ 1.0 x) (/ 1.0 (tan x)))","link":"16-invcotexample39","name":"invcot (example 3.9)","output":"(* (fma 0.0004938271604938272 (pow x 4.0) -0.1111111111111111) (/ x (fma 0.022222222222222223 (* x x) -0.3333333333333333)))","pre":"(and (< -0.026 x) (< x 0.026))","prec":"binary64","preprocess":"()","spec":"(- (/ 1.0 x) (/ 1.0 (tan x)))","start":59.88608867699588,"start-est":59.86984363646459,"status":"eq-target","target":0.06675533439195565,"target-prog":"(if (< (fabs x) 0.026) (* (/ x 3.0) (+ 1.0 (/ (* x x) 15.0))) (- (/ 1.0 x) (/ 1.0 (tan x))))","time":21775.783447265625,"vars":["x"]},{"bits":128,"conversions":[],"cost-accuracy":"((20544 60.02564186441087) (61384 0.29376783292587055) ((704 3.3729596346200945 (+ (+ (/ 1.0 b) (/ 1.0 a)) (* eps -0.5))) (580 26.259143582923116 (if (<= b 1.5326241144515417e-119) (+ (/ 1.0 b) (* eps -0.5)) (/ 1.0 a))) (580 8.812322033405948 (if (<= a -1.3146277202958566e+59) (+ (/ 1.0 b) (* eps -0.5)) (/ (/ (+ a b) b) a))) (448 3.6399950575901214 (+ (/ 1.0 b) (/ 1.0 a))) (324 26.394309953473474 (if (<= b 1.5326241144515417e-119) (/ 1.0 b) (/ 1.0 a))) (192 61.98904429010041 (* eps -0.5)) (192 33.17049906326344 (/ 1.0 a))))","end":0.29376783292587055,"end-est":0.0078125,"identifier":"#f","input":"(/ (* eps (- (exp (* (+ a b) eps)) 1.0)) (* (- (exp (* a eps)) 1.0) (- (exp (* b eps)) 1.0)))","link":"17-expq3problem342","name":"expq3 (problem 3.4.2)","output":"(if (<= (/ (* eps (+ (exp (* eps (+ a b))) -1.0)) (* (+ (exp (* eps a)) -1.0) (+ (exp (* eps b)) -1.0))) (- INFINITY)) (+ (/ 1.0 b) (/ 1.0 a)) (if (<= (/ (* eps (+ (exp (* eps (+ a b))) -1.0)) (* (+ (exp (* eps a)) -1.0) (+ (exp (* eps b)) -1.0))) 2e-32) (/ (* eps (expm1 (* eps (+ a b)))) (* (expm1 (* eps a)) (expm1 (* eps b)))) (+ (/ 1.0 b) (/ 1.0 a))))","pre":"(and (< -1.0 eps) (< eps 1.0))","prec":"binary64","preprocess":"()","spec":"(/ (* eps (- (exp (* (+ a b) eps)) 1.0)) (* (- (exp (* a eps)) 1.0) (- (exp (* b eps)) 1.0)))","start":60.02564186441087,"start-est":61.80878979987342,"status":"gt-target","target":14.66458400463214,"target-prog":"(/ (+ a b) (* a b))","time":19617.15380859375,"vars":["a","b","eps"]},{"bits":128,"conversions":[],"cost-accuracy":"((13120 41.01039127177398) (12992 0.460375) ((576 21.62822596470973 (+ 0.5 (+ (* x 0.08333333333333333) (/ 1.0 x)))) (320 21.692735609031505 (+ 0.5 (/ 1.0 x))) (192 21.663205490164998 (/ 1.0 x)) (64 61.89009070795695 0.5)))","end":0.460375,"end-est":0.01953125,"identifier":"#f","input":"(/ (exp x) (- (exp x) 1.0))","link":"18-expq2section311","name":"expq2 (section 3.11)","output":"(/ (exp x) (expm1 x))","pre":"TRUE","prec":"binary64","preprocess":"()","spec":"(/ (exp x) (- (exp x) 1.0))","start":41.01039127177398,"start-est":40.09118478062175,"status":"gt-target","target":40.56744276151326,"target-prog":"(/ 1.0 (- 1.0 (exp (- x))))","time":4225.74267578125,"vars":["x"]},{"bits":128,"conversions":[],"cost-accuracy":"((6592 58.719505075682704) (6464 0.000375) ())","end":0.000375,"end-est":0,"identifier":"#f","input":"(- (exp x) 1.0)","link":"19-expm1example37","name":"expm1 (example 3.7)","output":"(expm1 x)","pre":"(< -0.00017 x)","prec":"binary64","preprocess":"()","spec":"(- (exp x) 1.0)","start":58.719505075682704,"start-est":58.313690571831934,"status":"eq-target","target":0.4227589145439933,"target-prog":"(* x (+ (+ 1.0 (/ x 2.0)) (/ (* x x) 6.0)))","time":3077.34912109375,"vars":["x"]},{"bits":128,"conversions":[],"cost-accuracy":"((6720 29.011973335064102) (6592 0.019721768606074205) ((192 21.54303512267569 (* a x))))","end":0.019721768606074205,"end-est":0.014003759768442016,"identifier":"#f","input":"(- (exp (* a x)) 1.0)","link":"20-expaxsection35","name":"expax (section 3.5)","output":"(expm1 (* a x))","pre":"TRUE","prec":"binary64","preprocess":"()","spec":"(- (exp (* a x)) 1.0)","start":29.011973335064102,"start-est":27.812355643039417,"status":"eq-target","target":0.1688407806730228,"target-prog":"(if (< (fabs (* a x)) 0.1) (* (* a x) (+ 1.0 (+ (/ (* a x) 2.0) (/ (pow (* a x) 2.0) 6.0)))) (- (exp (* a x)) 1.0))","time":3249.9306640625,"vars":["a","x"]},{"bits":128,"conversions":[],"cost-accuracy":"((13184 29.909853064438302) (13568 0.6667769088442903) ((13568 0.671684404703285 (+ (* x x) (* (pow x 4.0) (fma 0.002777777777777778 (* x x) 0.08333333333333333)))) (13184 0.805791050879347 (fma x x (* (pow x 4.0) 0.08333333333333333))) (6912 0.8093073762981549 (+ (* x x) (* (pow x 4.0) 0.08333333333333333))) (192 1.1986830376355693 (* x x)) (64 60.24644518383059 x)))","end":0.6667769088442903,"end-est":0.6313960255565633,"identifier":"#f","input":"(+ (- (exp x) 2.0) (exp (- x)))","link":"21-exp2problem337","name":"exp2 (problem 3.3.7)","output":"(fma x x (* (pow x 4.0) (+ (* 0.002777777777777778 (* x x)) 0.08333333333333333)))","pre":"TRUE","prec":"binary64","preprocess":"()","spec":"(+ (- (exp x) 2.0) (exp (- x)))","start":29.909853064438302,"start-est":30.307641263524996,"status":"eq-target","target":0.05128834688275237,"target-prog":"(* 4.0 (pow (sinh (/ x 2.0)) 2.0))","time":12010.5810546875,"vars":["x"]},{"bits":128,"conversions":[],"cost-accuracy":"((960 9.387027935576734) (15432 0.8871721811210422) ((8712 0.9797210493154955 (if (<= (+ (- (/ 1.0 (+ 1.0 x)) (/ 2.0 x)) (/ 1.0 (+ x -1.0))) -2000.0) (+ (- (/ 1.0 (+ 1.0 x)) (/ 2.0 x)) (/ 1.0 (+ x -1.0))) (if (<= (+ (- (/ 1.0 (+ 1.0 x)) (/ 2.0 x)) (/ 1.0 (+ x -1.0))) 1e-28) (/ 2.0 (pow x 3.0)) (+ (- (/ 1.0 (+ 1.0 x)) (/ 2.0 x)) (/ 1.0 (+ x -1.0)))))) (3016 8.177645242607737 (if (<= (+ (- (/ 1.0 (+ 1.0 x)) (/ 2.0 x)) (/ 1.0 (+ x -1.0))) -2e-23) (+ (/ 1.0 (+ x -1.0)) (/ (/ (- -2.0 x) (+ 1.0 x)) x)) (if (<= (+ (- (/ 1.0 (+ 1.0 x)) (/ 2.0 x)) (/ 1.0 (+ x -1.0))) 1e-28) (/ (/ -1.0 x) (* (+ x -1.0) (/ x (+ -1.0 (/ -1.0 x))))) (+ (- (/ 1.0 (+ 1.0 x)) (/ 2.0 x)) (/ 1.0 (+ x -1.0)))))) (3016 8.180501630038401 (if (<= (+ (- (/ 1.0 (+ 1.0 x)) (/ 2.0 x)) (/ 1.0 (+ x -1.0))) -2e-23) (+ (/ 1.0 (+ x -1.0)) (/ 1.0 (/ x (/ (- -2.0 x) (+ 1.0 x))))) (if (<= (+ (- (/ 1.0 (+ 1.0 x)) (/ 2.0 x)) (/ 1.0 (+ x -1.0))) 1e-28) (/ (/ -1.0 x) (* (+ x -1.0) (/ x (+ -1.0 (/ -1.0 x))))) (+ (- (/ 1.0 (+ 1.0 x)) (/ 2.0 x)) (/ 1.0 (+ x -1.0)))))) (1224 8.878410780680433 (if (<= x -116160.441295594) (/ (/ -1.0 x) (* (+ x -1.0) (/ x (+ -1.0 (/ -1.0 x))))) (if (<= x 0.0009829503473545774) (+ (* x -2.0) (/ -2.0 x)) (/ (/ -1.0 x) (* (+ x -1.0) (/ x (+ -1.0 (/ -1.0 x)))))))) (960 9.399565720209914 (+ (/ 1.0 (+ x -1.0)) (/ (/ (- -2.0 x) (+ 1.0 x)) x))) (712 14.869952996981475 (if (<= x -116160.441295594) (/ (/ -1.0 x) x) (if (<= x 0.0009829503473545774) (+ (* x -2.0) (/ -2.0 x)) (/ 1.0 (* x x))))) (584 15.398860784925594 (if (<= x -116160.441295594) (/ (/ -1.0 x) x) (if (<= x 0.0009829503473545774) (/ -2.0 x) (/ (/ -1.0 x) x)))) (584 15.236088208767177 (if (<= x -116160.441295594) (/ (/ -1.0 x) x) (if (<= x 0.0009829503473545774) (/ -2.0 x) (/ -1.0 (* x x))))) (584 15.016947803525316 (if (<= x -116160.441295594) (/ (/ -1.0 x) x) (if (<= x 0.0009829503473545774) (/ -2.0 x) (/ 1.0 (* x x))))) (448 10.344769951414504 (+ -1.0 (- 1.0 (/ 2.0 x)))) (192 56.31640766070447 (/ -1.0 x)) (192 30.453360282699514 (/ -2.0 x))))","end":0.8871721811210422,"end-est":0.2535324435789084,"identifier":"#f","input":"(+ (- (/ 1.0 (+ x 1.0)) (/ 2.0 x)) (/ 1.0 (- x 1.0)))","link":"22-3fracproblem333","name":"3frac (problem 3.3.3)","output":"(if (<= (+ (- (/ 1.0 (+ 1.0 x)) (/ 2.0 x)) (/ 1.0 (+ x -1.0))) -2000.0) (+ (- (/ 1.0 (+ 1.0 x)) (/ 2.0 x)) (/ 1.0 (+ x -1.0))) (if (<= (+ (- (/ 1.0 (+ 1.0 x)) (/ 2.0 x)) (/ 1.0 (+ x -1.0))) 1e-28) (+ (/ 2.0 (pow x 5.0)) (/ 2.0 (pow x 3.0))) (+ (- (/ 1.0 (+ 1.0 x)) (/ 2.0 x)) (/ 1.0 (+ x -1.0)))))","pre":"TRUE","prec":"binary64","preprocess":"()","spec":"(+ (- (/ 1.0 (+ x 1.0)) (/ 2.0 x)) (/ 1.0 (- x 1.0)))","start":9.387027935576734,"start-est":12.011244375016531,"status":"eq-target","target":0.3183472329112236,"target-prog":"(/ 2.0 (* x (- (* x x) 1.0)))","time":12699.72802734375,"vars":["x"]},{"bits":128,"conversions":[],"cost-accuracy":"((13120 37.576575002658444) (39304 0.9455402995792993) ((32968 0.9489813758959239 (if (<= eps -1.7016277571796792) (- (/ (+ (tan x) (tan eps)) (- 1.0 (* (tan x) (tan eps)))) (tan x)) (if (<= eps 4.0203705636952724e-28) (+ eps (* eps (/ (pow (sin x) 2.0) (pow (cos x) 2.0)))) (- (/ (+ (tan x) (tan eps)) (- 1.0 (* (tan x) (tan eps)))) (tan x))))) (26440 14.723307879917233 (if (<= eps -1.7016277571796792) (tan eps) (if (<= eps 4.0203705636952724e-28) (+ eps (/ (* eps (pow (sin x) 2.0)) (pow (cos x) 2.0))) (tan eps)))) (26440 14.720238664207628 (if (<= eps -1.7016277571796792) (tan eps) (if (<= eps 4.0203705636952724e-28) (+ eps (* eps (/ (pow (sin x) 2.0) (pow (cos x) 2.0)))) (tan eps)))) (6464 43.52353502892006 (expm1 eps)) (6464 27.301517940750358 (tan eps)) (64 43.977040860404536 eps)))","end":0.9455402995792993,"end-est":0.265620913931087,"identifier":"#f","input":"(- (tan (+ x eps)) (tan x))","link":"23-2tanproblem332","name":"2tan (problem 3.3.2)","output":"(if (<= eps -1.7016277571796792) (- (/ (+ (tan x) (tan eps)) (- 1.0 (* (tan x) (tan eps)))) (tan x)) (if (<= eps 4.0203705636952724e-28) (+ eps (* eps (/ (pow (sin x) 2.0) (pow (cos x) 2.0)))) (- (/ (+ (tan x) (tan eps)) (fma (tan x) (- (tan eps)) 1.0)) (tan x))))","pre":"TRUE","prec":"binary64","preprocess":"()","spec":"(- (tan (+ x eps)) (tan x))","start":37.576575002658444,"start-est":38.80597404684991,"status":"gt-target","target":15.052359699708253,"target-prog":"(/ (sin eps) (* (cos x) (cos (+ x eps))))","time":25117.8818359375,"vars":["x","eps"]},{"bits":128,"conversions":[],"cost-accuracy":"((13120 30.258068321114884) (13248 0.16119116562662258) ((26308 0.6496348798159214 (if (<= (- (sqrt (+ 1.0 x)) (sqrt x)) 2e-7) (/ 1.0 (+ (sqrt x) (sqrt x))) (- (sqrt (+ 1.0 x)) (sqrt x)))) (13252 1.130747829911517 (if (<= x 0.6927644168242748) (+ (- 1.0 (sqrt x)) (* x 0.5)) (/ 1.0 (+ (sqrt x) (sqrt x))))) (6724 30.940631312719933 (if (<= x 0.007606156664243212) (- 1.0 (sqrt x)) 1.0)) (6720 27.10178548571515 (/ 1.0 (+ 1.0 (sqrt x)))) (64 31.629684627520085 1.0)))","end":0.16119116562662258,"end-est":0.16472626953688402,"identifier":"#f","input":"(- (sqrt (+ x 1.0)) (sqrt x))","link":"24-2sqrtexample31","name":"2sqrt (example 3.1)","output":"(/ 1.0 (+ (sqrt (+ 1.0 x)) (sqrt x)))","pre":"TRUE","prec":"binary64","preprocess":"()","spec":"(- (sqrt (+ x 1.0)) (sqrt x))","start":30.258068321114884,"start-est":28.59466463516025,"status":"eq-target","target":0.16119116562662258,"target-prog":"(/ 1.0 (+ (sqrt (+ x 1.0)) (sqrt x)))","time":9944.489013671875,"vars":["x"]},{"bits":128,"conversions":[],"cost-accuracy":"((13120 37.26846586245603) (45248 0.40425420078815555) ((32448 0.38900267973234837 (fma (cos x) (sin eps) (* (sin x) (+ (cos eps) -1.0)))) (26176 0.3997336443751638 (+ (* (sin x) (+ (cos eps) -1.0)) (* (cos x) (sin eps)))) (13888 15.701137093951118 (* 2.0 (* (sin (* (+ eps (- x x)) 0.5)) (cos (* 0.5 (+ x (+ x eps))))))) (13768 15.73078472395628 (if (<= eps -0.000780978539432837) (- (sin eps) (sin x)) (if (<= eps 8.524908255694355e-29) (+ (* (sin x) (* eps (* eps -0.5))) (* (cos x) eps)) (- (sin eps) (sin x))))) (13640 15.730328875403762 (if (<= eps -0.000780978539432837) (- (sin eps) (sin x)) (if (<= eps 8.524908255694355e-29) (* eps (+ (cos x) (* (sin x) (* eps -0.5)))) (- (sin eps) (sin x))))) (13256 15.8154750374876 (if (<= eps -0.000780978539432837) (- (sin eps) (sin x)) (if (<= eps 8.524908255694355e-29) (* (cos x) eps) (- (sin eps) (sin x))))) (6856 16.174493916679257 (if (<= eps -0.000780978539432837) (sin eps) (if (<= eps 8.524908255694355e-29) (* (cos x) eps) (sin eps)))) (6464 28.990215883672036 (sin eps)) (64 45.535923895503394 eps)))","end":0.40425420078815555,"end-est":0.2592294126177868,"identifier":"#f","input":"(- (sin (+ x eps)) (sin x))","link":"25-2sinexample33","name":"2sin (example 3.3)","output":"(fma (cos x) (sin eps) (* (sin x) (log (exp (+ (cos eps) -1.0)))))","pre":"TRUE","prec":"binary64","preprocess":"()","spec":"(- (sin (+ x eps)) (sin x))","start":37.26846586245603,"start-est":35.614532231915966,"status":"gt-target","target":15.674272254796833,"target-prog":"(* 2.0 (* (cos (+ x (/ eps 2.0))) (sin (/ eps 2.0))))","time":20012.4365234375,"vars":["x","eps"]},{"bits":128,"conversions":[],"cost-accuracy":"((13376 19.125835964250623) (59076 0.13831939111144576) ((33988 0.12450344500277799 (if (<= (- (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (+ 1.0 x)))) 5e-7) (fma 0.5 (/ (pow x -0.5) x) (* (/ 1.0 (pow x 2.5)) (+ (/ 0.3125 x) (+ -0.375 (/ -0.2734375 (* x x)))))) (- (pow x -0.5) (pow (+ 1.0 x) -0.5)))) (26692 0.13982710192420522 (if (<= (- (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (+ 1.0 x)))) 5e-7) (* (/ (pow x -0.5) x) (+ (/ -0.375 x) (+ 0.5 (/ 0.3125 (* x x))))) (- (pow x -0.5) (pow (+ 1.0 x) -0.5)))) (7556 0.581291538258603 (if (<= x 0.018865154281730787) (+ (+ (pow x -0.5) (* x 0.5)) -1.0) (* (/ (pow x -0.5) x) (+ (/ -0.375 x) (+ 0.5 (/ 0.3125 (* x x))))))) (7172 0.7143572354052132 (if (<= x 0.018865154281730787) (+ (+ (pow x -0.5) (* x 0.5)) -1.0) (* (/ (pow x -0.5) x) (+ 0.5 (/ -0.375 x))))) (7044 0.8957803098320481 (if (<= x 0.018865154281730787) (+ (+ (pow x -0.5) (* x 0.5)) -1.0) (* 0.5 (pow x -1.5)))) (6788 1.063794239379956 (if (<= x 0.018865154281730787) (+ (pow x -0.5) -1.0) (* 0.5 (pow x -1.5)))) (6656 31.845605106400836 (* 0.5 (pow x -1.5))) (64 51.607128205346484 0.0)))","end":0.13831939111144576,"end-est":0.109375,"identifier":"#f","input":"(- (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (+ x 1.0))))","link":"26-2isqrtexample36","name":"2isqrt (example 3.6)","output":"(if (<= (- (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (+ 1.0 x)))) 5e-7) (fma 0.5 (/ (pow x -0.5) x) (* (/ 1.0 (pow x 2.5)) (+ (/ 0.3125 x) (+ -0.375 (/ -0.2734375 (* x x)))))) (fma (pow (cbrt (- (pow (+ 1.0 x) -0.5))) 2.0) (cbrt (- (pow (+ 1.0 x) -0.5))) (pow x -0.5)))","pre":"TRUE","prec":"binary64","preprocess":"()","spec":"(- (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (+ x 1.0))))","start":19.125835964250623,"start-est":18.8035161153059,"status":"eq-target","target":0.6399257571606031,"target-prog":"(/ 1.0 (+ (* (+ x 1.0) (sqrt x)) (* x (sqrt (+ x 1.0)))))","time":15467.678955078125,"vars":["x"]},{"bits":128,"conversions":[],"cost-accuracy":"((13120 15.475164483378398) (6912 0.35284190630196816) ((6784 1.5734057882210226 (atan2 1.0 (+ 1.0 (* N N)))) (6656 30.811202043579062 (atan2 1.0 (+ 1.0 N)))))","end":0.35284190630196816,"end-est":0.2959718779524899,"identifier":"#f","input":"(- (atan (+ N 1.0)) (atan N))","link":"27-2atanexample35","name":"2atan (example 3.5)","output":"(atan2 1.0 (+ 1.0 (* N (+ 1.0 N))))","pre":"TRUE","prec":"binary64","preprocess":"()","spec":"(- (atan (+ N 1.0)) (atan N))","start":15.475164483378398,"start-est":14.41729367913195,"status":"eq-target","target":0.3544150266145583,"target-prog":"(atan (/ 1.0 (+ 1.0 (* N (+ N 1.0)))))","time":8701.5029296875,"vars":["N"]}]}