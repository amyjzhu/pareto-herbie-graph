{"branch":"rewrite-localize","commit":"817c46425e02e4681bd7b5db034276dbf10539f3","date":1660383633,"flags":["rules:arithmetic","rules:polynomials","rules:fractions","rules:exponents","rules:trigonometry","rules:hyperbolic","rules:numerics","rules:special","rules:bools","rules:branches","generate:rr","generate:taylor","generate:simplify","reduce:regimes","reduce:avg-error","reduce:binary-search","reduce:branch-expressions","setup:simplify","setup:search"],"hostname":"warfa","iterations":4,"note":"hamming","points":256,"seed":"2022225","tests":[{"bits":128,"conversions":[],"cost-accuracy":"((19776 40.647328221096345) (12992 0.0155) ((6464 18.099154470261816 (sqrt 2.0))))","end":0.0155,"end-est":0,"identifier":"#f","input":"(sqrt (/ (- (exp (* 2.0 x)) 1.0) (- (exp x) 1.0)))","link":"0-sqrtexpproblem344","name":"sqrtexp (problem 3.4.4)","output":"(sqrt (+ 1.0 (exp x)))","pre":"TRUE","prec":"binary64","preprocess":"()","spec":"(sqrt (/ (- (exp (* 2.0 x)) 1.0) (- (exp x) 1.0)))","start":40.647328221096345,"start-est":40.179643498169135,"status":"imp-start","target":false,"target-prog":"#f","time":2658.76171875,"vars":["x"]},{"bits":128,"conversions":[],"cost-accuracy":"((13248 31.46009772425657) (14152 0.19049871470558344) ((13640 0.21951609125106777 (if (<= x -157.8231025490532) (/ (- x (sin x)) (- x (tan x))) (if (<= x 1.4683992570838478e-5) (+ (* (* x x) (+ 0.225 (* x (* x -0.009642857142857142)))) -0.5) (/ 1.0 (/ (- x (tan x)) (- x (sin x))))))) (13512 0.7093726450940914 (if (<= x -157.8231025490532) (+ 1.0 (/ (- (tan x) (sin x)) x)) (if (<= x 1.4683992570838478e-5) (+ (* (* x x) (+ 0.225 (* x (* x -0.009642857142857142)))) -0.5) (+ 1.0 (/ (- (tan x) (sin x)) x))))) (13512 0.21848830224284074 (if (<= x -157.8231025490532) (/ (- x (sin x)) (- x (tan x))) (if (<= x 1.4683992570838478e-5) (+ (* (* x x) (+ 0.225 (* x (* x -0.009642857142857142)))) -0.5) (/ (- x (sin x)) (- x (tan x)))))) (1096 0.999807029628942 (if (<= x -157.8231025490532) 1.0 (if (<= x 1.4683992570838478e-5) (+ (* (* x x) (+ 0.225 (* x (* x -0.009642857142857142)))) -0.5) 1.0))) (712 1.0310568886975047 (if (<= x -157.8231025490532) 1.0 (if (<= x 1.4683992570838478e-5) (+ (* 0.225 (* x x)) -0.5) 1.0))) (328 26.496991218613736 (if (<= x -157.8231025490532) 2.0 (if (<= x 1.4683992570838478e-5) -0.5 2.0))) (328 1.1801076659198313 (if (<= x -157.8231025490532) 1.0 (if (<= x 1.4683992570838478e-5) -0.5 1.0))) (64 31.833516086328572 -0.5)))","end":0.19049871470558344,"end-est":0.00390625,"identifier":"#f","input":"(/ (- x (sin x)) (- x (tan x)))","link":"1-sintanproblem345","name":"sintan (problem 3.4.5)","output":"(if (<= x -157.8231025490532) (/ (- x (sin x)) (- x (tan x))) (if (<= x 1.4683992570838478e-5) (+ (+ (* 0.225 (* x x)) (+ (* -0.009642857142857142 (pow x 4.0)) (* 0.00024107142857142857 (pow x 6.0)))) -0.5) (/ 1.0 (/ (- x (tan x)) (- x (sin x))))))","pre":"TRUE","prec":"binary64","preprocess":"()","spec":"(/ (- x (sin x)) (- x (tan x)))","start":31.46009772425657,"start-est":32.213404343067594,"status":"imp-start","target":false,"target-prog":"#f","time":15063.47412109375,"vars":["x"]},{"bits":128,"conversions":[],"cost-accuracy":"((7168 34.15045226672045) (7368 10.33847125604648) ((7440 13.640433929612735 (if (<= b_2 -2e-60) (+ (* -2.0 (/ b_2 a)) (* 0.5 (/ c b_2))) (if (<= b_2 -1.35e-76) (/ (- (sqrt (* a (- c))) b_2) a) (if (<= b_2 -4.6e-100) (/ -2.0 (/ a b_2)) (if (<= b_2 2.7e-68) (/ (- (sqrt (* a (- c))) b_2) a) (/ (* c -0.5) b_2)))))) (836 22.664526865911082 (if (<= b_2 -2.3e-302) (+ (* -2.0 (/ b_2 a)) (* 0.5 (/ c b_2))) (/ (* c -0.5) b_2))) (452 36.940575731623746 (if (<= b_2 5.8e-183) (/ (- b_2) a) (* c (/ -0.5 b_2)))) (452 23.030852502331115 (if (<= b_2 5.8e-183) (/ -2.0 (/ a b_2)) (* c (/ -0.5 b_2)))) (452 22.966655906389356 (if (<= b_2 5.8e-183) (/ (* b_2 -2.0) a) (* c (/ -0.5 b_2)))) (452 22.89331195886433 (if (<= b_2 5.8e-183) (/ (* b_2 -2.0) a) (/ (* c -0.5) b_2))) (388 53.45284698044696 (if (<= b_2 -2.25e-302) (/ (- b_2) a) (/ 0.0 a))) (192 56.50805780654178 (/ 0.0 a))))","end":10.33847125604648,"end-est":6.814992228299722,"identifier":"#f","input":"(/ (+ (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)","link":"2-quad2pproblem321positive","name":"quad2p (problem 3.2.1, positive)","output":"(if (<= b_2 -1.55e+147) (/ (* b_2 -2.0) a) (if (<= b_2 1.35e-62) (/ (- (sqrt (- (* b_2 b_2) (* a c))) b_2) a) (/ (* c -0.5) b_2)))","pre":"TRUE","prec":"binary64","preprocess":"()","spec":"(/ (+ (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)","start":34.15045226672045,"start-est":31.68050024107936,"status":"imp-start","target":false,"target-prog":"#f","time":13877.181884765625,"vars":["a","b_2","c"]},{"bits":128,"conversions":[],"cost-accuracy":"((7168 34.49558019426137) (7432 10.294653242247467) ((7240 13.453129702720158 (if (<= b_2 -3.7e-50) (/ (* c -0.5) b_2) (if (<= b_2 5.5e-85) (/ (- (- b_2) (sqrt (* c (- a)))) a) (+ (* -2.0 (/ b_2 a)) (* 0.5 (/ c b_2)))))) (7112 13.66082348929679 (if (<= b_2 -3.7e-50) (/ (* c -0.5) b_2) (if (<= b_2 5.5e-85) (/ (- (sqrt (* c (- a)))) a) (+ (* -2.0 (/ b_2 a)) (* 0.5 (/ c b_2)))))) (452 36.5791069439828 (if (<= b_2 -6.5e-223) (* c (/ -0.5 b_2)) (/ (- b_2) a))) (452 22.791242494501 (if (<= b_2 -6.5e-223) (* c (/ -0.5 b_2)) (* b_2 (/ -2.0 a)))) (452 22.719355974541557 (if (<= b_2 -1.3e-222) (* (/ c b_2) -0.5) (* b_2 (/ -2.0 a)))) (452 22.65132008897828 (if (<= b_2 -1.3e-222) (* (/ c b_2) -0.5) (* -2.0 (/ b_2 a)))) (452 22.649149372794067 (if (<= b_2 -6.5e-223) (/ (* c -0.5) b_2) (* -2.0 (/ b_2 a)))) (388 52.95693351908114 (if (<= b_2 0.0) 0.0 (/ (- b_2) a))) (64 55.999403376267246 0.0)))","end":10.294653242247467,"end-est":9.443511975283934,"identifier":"#f","input":"(/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)","link":"3-quad2mproblem321negative","name":"quad2m (problem 3.2.1, negative)","output":"(if (<= b_2 -3.7e-50) (/ (* c -0.5) b_2) (if (<= b_2 4.8e+67) (/ (- (- b_2) (sqrt (- (* b_2 b_2) (* c a)))) a) (+ (* -2.0 (/ b_2 a)) (* 0.5 (/ c b_2)))))","pre":"TRUE","prec":"binary64","preprocess":"()","spec":"(/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)","start":34.49558019426137,"start-est":32.03251059498831,"status":"imp-start","target":false,"target-prog":"#f","time":15086.382568359375,"vars":["a","b_2","c"]},{"bits":128,"conversions":[],"cost-accuracy":"((6848 30.936217446240704) (13376 0.12859718125612996) ((13376 0.46627994241287524 (/ (tan (* x 0.5)) (* x (/ x (sin x))))) (7112 0.3453605900884082 (if (<= x -4.119247542633639) (/ (/ (- 1.0 (cos x)) x) x) (if (<= x 0.0003316464543706644) (+ 0.5 (* x (* x -0.041666666666666664))) (/ (/ (- 1.0 (cos x)) x) x)))) (7112 0.3722783857794708 (if (<= x -4.119247542633639) (/ (- (/ 1.0 x) (/ (cos x) x)) x) (if (<= x 0.0003316464543706644) (+ 0.5 (* x (* x -0.041666666666666664))) (/ (/ (- 1.0 (cos x)) x) x)))) (7112 0.3535334533872593 (if (<= x -4.119247542633639) (/ (/ 1.0 x) (/ x (- 1.0 (cos x)))) (if (<= x 0.0003316464543706644) (+ 0.5 (* x (* x -0.041666666666666664))) (/ (/ (- 1.0 (cos x)) x) x)))) (832 14.325370948190116 (/ (/ 1.0 x) (+ (* x 0.16666666666666666) (* (/ 1.0 x) 2.0)))) (712 14.376101619147482 (if (<= x -4.119247542633639) (/ 6.0 (* x x)) (if (<= x 0.0003316464543706644) (+ 0.5 (* x (* x -0.041666666666666664))) (/ 6.0 (* x x))))) (584 14.507685830250837 (if (<= x -4.119247542633639) (/ 6.0 (* x x)) (if (<= x 0.0003316464543706644) 0.5 (/ 6.0 (* x x))))) (64 31.491719634667273 0.5)))","end":0.12859718125612996,"end-est":0.12794877930532605,"identifier":"#f","input":"(/ (- 1.0 (cos x)) (* x x))","link":"4-cos2problem341","name":"cos2 (problem 3.4.1)","output":"(* (/ (sin x) x) (/ (tan (* x 0.5)) x))","pre":"TRUE","prec":"binary64","preprocess":"()","spec":"(/ (- 1.0 (cos x)) (* x x))","start":30.936217446240704,"start-est":35.05502476379779,"status":"imp-start","target":false,"target-prog":"#f","time":8503.04345703125,"vars":["x"]},{"bits":128,"conversions":[],"cost-accuracy":"((13504 32.045439634764264) (46728 1.2167485682781416) ((46600 1.2161284349514598 (if (<= (/ 1.0 n) -0.0002) (fma (sqrt (pow x (/ 1.0 n))) (- (sqrt (pow x (/ 1.0 n)))) (exp (/ (log1p x) n))) (if (<= (/ 1.0 n) 4e-10) (/ (log1p (/ 1.0 x)) n) (/ (- (pow (exp (/ (log1p x) n)) 2.0) (pow x (* (/ 1.0 n) 2.0))) (+ (pow x (/ 1.0 n)) (exp (/ (log1p x) n))))))) (45828 1.4062809014912796 (if (<= (/ 1.0 n) -0.0002) (fma (sqrt (pow x (/ 1.0 n))) (- (sqrt (pow x (/ 1.0 n)))) (exp (/ (log1p x) n))) (if (<= (/ 1.0 n) 4e-10) (/ (log1p (/ 1.0 x)) n) (- (+ 1.0 (/ x n)) (pow x (/ 1.0 n)))))) (32836 1.4059917608060326 (if (<= (/ 1.0 n) -0.0002) (- (cbrt (pow (exp (/ (log1p x) n)) 3.0)) (pow x (/ 1.0 n))) (if (<= (/ 1.0 n) 4e-10) (/ (log1p (/ 1.0 x)) n) (- (+ 1.0 (/ x n)) (pow x (/ 1.0 n)))))) (13764 1.4046255130438028 (if (<= (/ 1.0 n) -0.0002) (- (pow (+ 1.0 x) (/ 1.0 n)) (pow x (/ 1.0 n))) (if (<= (/ 1.0 n) 4e-10) (/ (log1p (/ 1.0 x)) n) (- (+ 1.0 (/ x n)) (pow x (/ 1.0 n)))))) (13508 1.4356220807559017 (if (<= (/ 1.0 n) -0.02) (/ (exp (/ (log x) n)) (* n x)) (if (<= (/ 1.0 n) 4e-10) (/ (log1p (/ 1.0 x)) n) (- (+ 1.0 (/ x n)) (pow x (/ 1.0 n)))))) (7560 1.608789888233416 (if (<= (/ 1.0 n) -5000.0) (/ 0.0 n) (if (<= (/ 1.0 n) 4e-10) (/ (log1p (/ 1.0 x)) n) (- (+ 1.0 (/ x n)) (pow x (/ 1.0 n)))))) (7180 1.6311043689147562 (if (<= n -0.5) (/ (log1p (/ 1.0 x)) n) (if (<= n 0.0) (/ 0.0 n) (if (<= n 3445132.496807944) (- 1.0 (pow x (/ 1.0 n))) (/ (log1p (/ 1.0 x)) n))))) (6984 7.095343533608922 (if (<= n -0.5) (/ (log1p (/ 1.0 x)) n) (if (<= n 0.0) (/ 0.0 n) (/ (log1p (/ 1.0 x)) n)))) (6788 16.793754752978813 (if (<= x 0.21) (/ (- (log x)) n) (if (<= x 1.65e+237) (/ (+ (/ 1.0 x) (* (/ 1.0 (* x x)) (+ -0.5 (/ 0.3333333333333333 x)))) n) (/ 0.0 n)))) (1352 34.661575470961886 (if (<= n -48.54262362907699) (/ (/ 1.0 x) n) (if (<= n 4.3e-6) (+ (+ 1.0 (/ 1.0 (* n x))) -1.0) (/ (+ (/ 1.0 x) (* (/ 1.0 (* x x)) (+ -0.5 (/ 0.3333333333333333 x)))) n)))) (1352 34.617523260358254 (if (<= n -48.54262362907699) (/ (/ 1.0 x) n) (if (<= n 4.3e-6) (+ (+ 1.0 (/ 1.0 (* n x))) -1.0) (* (/ (/ 1.0 x) n) (+ (+ 1.0 (/ (/ 0.3333333333333333 x) x)) (/ -0.5 x)))))) (1352 28.38957675340942 (if (<= n -0.5) (/ (/ 1.0 x) n) (if (<= n 5.8e-14) (/ 0.0 n) (* (/ (/ 1.0 x) n) (+ (+ 1.0 (/ (/ 0.3333333333333333 x) x)) (/ -0.5 x)))))) (840 34.545118897201064 (if (<= n -48.54262362907699) (/ (/ 1.0 x) n) (if (<= n -1e-240) (+ (+ 1.0 (/ 1.0 (* n x))) -1.0) (/ (/ 1.0 x) n)))) (320 39.54239387142457 (/ (/ 1.0 x) n))))","end":1.2167485682781416,"end-est":0.9755541498849251,"identifier":"#f","input":"(- (pow (+ x 1.0) (/ 1.0 n)) (pow x (/ 1.0 n)))","link":"5-2nthrtproblem346","name":"2nthrt (problem 3.4.6)","output":"(if (<= (/ 1.0 n) -0.0002) (fma (sqrt (pow x (/ 1.0 n))) (- (sqrt (pow x (/ 1.0 n)))) (exp (/ (log1p x) n))) (if (<= (/ 1.0 n) 4e-10) (/ (log1p (/ 1.0 x)) n) (* (- (pow (exp (/ (log1p x) n)) 2.0) (pow x (* (/ 1.0 n) 2.0))) (/ 1.0 (+ (pow x (/ 1.0 n)) (exp (/ (log1p x) n)))))))","pre":"TRUE","prec":"binary64","preprocess":"()","spec":"(- (pow (+ x 1.0) (/ 1.0 n)) (pow x (/ 1.0 n)))","start":32.045439634764264,"start-est":35.70165507151411,"status":"imp-start","target":false,"target-prog":"#f","time":22499.86328125,"vars":["x","n"]},{"bits":128,"conversions":[],"cost-accuracy":"((13120 29.728942108162578) (19908 0.1940692103308106) ((6724 0.75022205296723 (if (<= N 0.0023813981322523565) (- N (log N)) (/ (+ 1.0 (/ -0.5 N)) N))) (6660 0.9927285046368518 (if (<= N 0.0023813981322523565) (- (log N)) (/ (+ 1.0 (/ -0.5 N)) N))) (192 30.569854996098485 (/ 1.0 N)) (64 61.09570407232582 N)))","end":0.1940692103308106,"end-est":0.05684448734202011,"identifier":"#f","input":"(- (log (+ N 1.0)) (log N))","link":"6-2logproblem336","name":"2log (problem 3.3.6)","output":"(if (<= (- (log (+ N 1.0)) (log N)) 2e-8) (/ (+ 1.0 (/ -0.5 N)) N) (log (/ (+ N 1.0) N)))","pre":"TRUE","prec":"binary64","preprocess":"()","spec":"(- (log (+ N 1.0)) (log N))","start":29.728942108162578,"start-est":31.346769923807614,"status":"imp-start","target":false,"target-prog":"#f","time":4369.780517578125,"vars":["N"]},{"bits":128,"conversions":[],"cost-accuracy":"((576 14.351700535653855) (6784 0.4045426297257576) ((712 1.3624685876230753 (if (<= x -158115409548.54633) (/ (/ -1.0 x) x) (if (<= x 0.036328354076812584) (+ 1.0 (- (/ -1.0 x) x)) (/ -1.0 (* x x))))) (584 1.961983896067892 (if (<= x -158115409548.54633) (/ -1.0 (* x x)) (if (<= x 0.036328354076812584) (/ -1.0 x) (/ -1.0 (* x x))))) (584 1.6200357805977217 (if (<= x -158115409548.54633) (/ -1.0 (* x x)) (if (<= x 0.036328354076812584) (+ 1.0 (/ -1.0 x)) (/ -1.0 (* x x))))) (584 1.4819064618631796 (if (<= x -158115409548.54633) (/ (/ -1.0 x) x) (if (<= x 0.036328354076812584) (+ 1.0 (/ -1.0 x)) (/ -1.0 (* x x))))) (448 0.4074907500383478 (/ 1.0 (* x (- -1.0 x)))) (192 61.886735505023346 (/ 1.0 x)) (192 30.694685361081845 (/ -1.0 x))))","end":0.4045426297257576,"end-est":0.1537499448404635,"identifier":"#f","input":"(- (/ 1.0 (+ x 1.0)) (/ 1.0 x))","link":"7-2fracproblem331","name":"2frac (problem 3.3.1)","output":"(/ 1.0 (- (fma x x x)))","pre":"TRUE","prec":"binary64","preprocess":"()","spec":"(- (/ 1.0 (+ x 1.0)) (/ 1.0 x))","start":14.351700535653855,"start-est":12.852441472205161,"status":"imp-start","target":false,"target-prog":"#f","time":3090.042724609375,"vars":["x"]},{"bits":128,"conversions":[],"cost-accuracy":"((13120 39.82741494583578) (33600 0.4021832611383475) ((32840 0.7357797074170263 (if (<= eps -118.26461522098978) (- (- (* (cos x) (cos eps)) (* (sin x) (sin eps))) (cos x)) (if (<= eps 5.771800815652218e-8) (fma (- (* 0.16666666666666666 (pow eps 3.0)) eps) (sin x) (* -0.5 (* eps (* eps (cos x))))) (- (- (* (cos x) (cos eps)) (* (sin x) (sin eps))) (cos x))))) (32840 0.7423053544889342 (if (<= eps -118.26461522098978) (- (- (* (cos x) (cos eps)) (* (sin x) (sin eps))) (cos x)) (if (<= eps 5.771800815652218e-8) (fma (- (* 0.16666666666666666 (pow eps 3.0)) eps) (sin x) (* -0.5 (* eps (* eps (cos x))))) (- (* (cos x) (cos eps)) (+ (cos x) (* (sin x) (sin eps))))))) (13640 14.877242038099157 (if (<= eps -118.26461522098978) (* -2.0 (pow (sin (* 0.5 eps)) 2.0)) (if (<= eps 0.01527960149338504) (* eps (- (* (cos x) (* eps -0.5)) (sin x))) (- (cos eps) (cos x))))) (13632 14.996573911476052 (* -2.0 (* (sin (* 0.5 eps)) (sin (* 0.5 (+ eps (* x 2.0))))))) (13316 15.027376722962678 (if (<= eps -118.26461522098978) (* -2.0 (pow (sin (* 0.5 eps)) 2.0)) (if (<= eps 0.01527960149338504) (* -2.0 (* (* 0.5 eps) (sin (* 0.5 (+ eps (* x 2.0)))))) (- (cos eps) (cos x))))) (13256 15.06953830498797 (if (<= eps -118.26461522098978) (+ (cos eps) -1.0) (if (<= eps 0.01527960149338504) (* -2.0 (* (* 0.5 eps) (sin (* 0.5 (+ eps (* x 2.0)))))) (- (cos eps) (cos x))))) (7496 15.296124060245527 (if (<= eps -118.26461522098978) (+ (cos eps) -1.0) (if (<= eps 0.01527960149338504) (* -2.0 (* (* 0.5 eps) (sin (* 0.5 (+ eps (* x 2.0)))))) (+ (cos eps) -1.0)))) (7120 32.94967943898001 (if (<= eps -118.26461522098978) (+ (cos eps) -1.0) (if (<= eps -1.2728329611437683e-135) (* eps (* eps -0.5)) (if (<= eps 4.5002868815618033e-153) (* eps (- x)) (if (<= eps 3.377792789568976e-14) (* eps (* eps -0.5)) (+ (cos eps) -1.0)))))) (6920 20.960363946728307 (if (<= eps -118.26461522098978) (+ (cos eps) -1.0) (if (<= eps 0.01527960149338504) (* eps (- (sin x))) (+ (cos eps) -1.0)))) (584 48.56681668941019 (if (<= x -2.2956110209782406e-104) (* eps (- x)) (if (<= x 5.682110305280385e-113) (* eps (* eps -0.5)) (* eps (- x))))) (256 52.65022362414994 (* eps (- x))) (64 55.90342321604605 0.0)))","end":0.4021832611383475,"end-est":0.3980101437041714,"identifier":"#f","input":"(- (cos (+ x eps)) (cos x))","link":"8-2cosproblem335","name":"2cos (problem 3.3.5)","output":"(* -2.0 (* (sin (* 0.5 eps)) (+ (* (sin (* 0.5 eps)) (cos (* 0.5 (* x 2.0)))) (* (cos (* 0.5 eps)) (sin (* 0.5 (* x 2.0)))))))","pre":"TRUE","prec":"binary64","preprocess":"()","spec":"(- (cos (+ x eps)) (cos x))","start":39.82741494583578,"start-est":37.78080147401849,"status":"imp-start","target":false,"target-prog":"#f","time":15868.38330078125,"vars":["x","eps"]},{"bits":128,"conversions":[],"cost-accuracy":"((13120 30.173847592077763) (33152 0.5459793088048732) ((39108 25.33634168661671 (if (<= (- (cbrt (+ 1.0 x)) (cbrt x)) 5e-11) (/ (+ 1.0 (- x x)) (+ 1.0 (* (cbrt x) (+ (cbrt (+ 1.0 x)) (cbrt x))))) (exp (log (- (cbrt (+ 1.0 x)) (cbrt x)))))) (33348 25.336386898844264 (if (<= (- (cbrt (+ 1.0 x)) (cbrt x)) 5e-11) (/ (+ 1.0 (- x x)) (+ 1.0 (* (cbrt x) (+ (cbrt (+ 1.0 x)) (cbrt x))))) (- (cbrt (+ 1.0 x)) (cbrt x)))) (26884 14.339701431754765 (if (<= x -75.73526447899259) (/ (+ 1.0 (- x x)) (+ 1.0 (* (cbrt x) (+ (cbrt (+ 1.0 x)) (cbrt x))))) (/ (+ 1.0 (- x x)) (+ (* (cbrt x) (+ (cbrt (+ 1.0 x)) (cbrt x))) (pow (+ 1.0 x) 0.6666666666666666))))) (20232 28.172636580056388 (if (<= x -10349978402223415000.0) (/ (+ 1.0 (- x x)) (+ (cbrt x) (cbrt (pow (+ 1.0 x) 2.0)))) (if (<= x 597397155086066.1) (- (cbrt (+ 1.0 x)) (cbrt x)) (/ (+ 1.0 (- x x)) (+ (cbrt x) (cbrt (pow (+ 1.0 x) 2.0))))))) (13120 30.173847592077763 (- (cbrt (+ 1.0 x)) (cbrt x))) (64 61.668466535601084 0.0) (64 32.38660377219606 1.0)))","end":0.5459793088048732,"end-est":0.5544128781467801,"identifier":"#f","input":"(- (cbrt (+ x 1.0)) (cbrt x))","link":"9-2cbrtproblem334","name":"2cbrt (problem 3.3.4)","output":"(/ (+ 1.0 (- x x)) (+ (pow (cbrt (+ 1.0 x)) 2.0) (* (cbrt x) (+ (cbrt (+ 1.0 x)) (cbrt x)))))","pre":"TRUE","prec":"binary64","preprocess":"()","spec":"(- (cbrt (+ x 1.0)) (cbrt x))","start":30.173847592077763,"start-est":31.58484156800081,"status":"imp-start","target":false,"target-prog":"#f","time":7391.993896484375,"vars":["x"]},{"bits":128,"conversions":[],"cost-accuracy":"((13120 30.904751988548053) (6592 0.000125) ())","end":0.000125,"end-est":0,"identifier":"#f","input":"(/ (- 1.0 (cos x)) (sin x))","link":"10-tanhfexample34","name":"tanhf (example 3.4)","output":"(tan (/ x 2.0))","pre":"TRUE","prec":"binary64","preprocess":"()","spec":"(/ (- 1.0 (cos x)) (sin x))","start":30.904751988548053,"start-est":35.661386733266966,"status":"eq-target","target":0.000125,"target-prog":"(tan (/ x 2.0))","time":7453.1591796875,"vars":["x"]},{"bits":128,"conversions":[],"cost-accuracy":"((7424 34.53122636840761) (7624 10.033353777476753) ((7624 10.085170331472627 (if (<= b -1.95e+135) (- (/ c b) (/ b a)) (if (<= b 4.8e-82) (* (- (sqrt (+ (* b b) (* a (* c -4.0)))) b) (/ 0.5 a)) (/ (- c) b)))) (7368 13.349767630454009 (if (<= b -5.5e-107) (- (/ c b) (/ b a)) (if (<= b 4.8e-82) (/ (- (sqrt (* a (* c -4.0))) b) (* a 2.0)) (/ (- c) b)))) (388 22.49320380427001 (if (<= b 1.56e-226) (/ (- b) a) (/ (- c) b))) (256 39.62245627020955 (/ (- c) b)) (192 56.26926624025426 (/ c b))))","end":10.033353777476753,"end-est":7.705343578815745,"identifier":"#f","input":"(/ (+ (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))","link":"11-quadpp42positive","name":"quadp (p42, positive)","output":"(if (<= b -3e+136) (- (/ c b) (/ b a)) (if (<= b 4.8e-82) (/ (- (sqrt (- (* b b) (* 4.0 (* c a)))) b) (* a 2.0)) (/ (- c) b)))","pre":"TRUE","prec":"binary64","preprocess":"()","spec":"(/ (+ (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))","start":34.53122636840761,"start-est":32.36397490331913,"status":"gt-target","target":21.60556990487286,"target-prog":"(if (< b 0.0) (/ (+ (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a)) (/ c (* a (/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a)))))","time":10975.23388671875,"vars":["a","b","c"]},{"bits":128,"conversions":[],"cost-accuracy":"((7424 34.65787735132546) (7688 10.56091655137062) ((7624 10.6104800736889 (if (<= b -1.35e-73) (/ 1.0 (- (/ a b) (/ b c))) (if (<= b 4.5e+113) (* (+ b (sqrt (+ (* b b) (* a (* c -4.0))))) (/ -0.5 a)) (/ (- b) a)))) (7368 13.646185929337745 (if (<= b -1.35e-73) (/ 1.0 (- (/ a b) (/ b c))) (if (<= b 1.2e-70) (/ (* -0.5 (+ b (sqrt (* a (* c -4.0))))) a) (- (/ c b) (/ b a))))) (708 22.702660906850003 (if (<= b 0.0) (/ 1.0 (- (/ a b) (/ b c))) (- (/ c b) (/ b a)))) (388 39.18651920672714 (if (<= b -1.56e-279) 0.0 (/ (- b) a))) (388 22.77092987340776 (if (<= b -1.7e-214) (/ (- c) b) (/ (- b) a))) (64 55.96499968953577 0.0)))","end":10.56091655137062,"end-est":8.679038493112307,"identifier":"#f","input":"(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))","link":"12-quadmp42negative","name":"quadm (p42, negative)","output":"(if (<= b -1.35e-73) (/ 1.0 (- (/ a b) (/ b c))) (if (<= b 4.5e+113) (/ (- (- b) (sqrt (+ (* b b) (* (* a c) -4.0)))) (* a 2.0)) (/ (- b) a)))","pre":"TRUE","prec":"binary64","preprocess":"()","spec":"(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))","start":34.65787735132546,"start-est":32.01136582271304,"status":"gt-target","target":21.157355816007886,"target-prog":"(if (< b 0.0) (/ c (* a (/ (+ (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a)))) (/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a)))","time":10145.9296875,"vars":["a","b","c"]},{"bits":128,"conversions":[],"cost-accuracy":"((13248 61.33174070208805) (13056 0.021752443751081738) ((7296 0.2921327912176158 (+ -1.0 (+ (* x (* x -0.5)) (- (* -0.4166666666666667 (pow x 3.0)) x)))) (576 0.4089058912573807 (+ -1.0 (- (* -0.5 (* x x)) x))) (192 0.6440598359555099 (- -1.0 x)) (64 1.360788675958771 -1.0)))","end":0.021752443751081738,"end-est":0.015625,"identifier":"#f","input":"(/ (log (- 1.0 x)) (log (+ 1.0 x)))","link":"13-qlogexample310","name":"qlog (example 3.10)","output":"(/ (log1p (- x)) (log1p x))","pre":"(and (< -1.0 x) (< x 1.0))","prec":"binary64","preprocess":"()","spec":"(/ (log (- 1.0 x)) (log (+ 1.0 x)))","start":61.33174070208805,"start-est":61.19642114603322,"status":"eq-target","target":0.29765843546267623,"target-prog":"(- (+ (+ (+ 1.0 x) (/ (* x x) 2.0)) (* 0.4166666666666667 (pow x 3.0))))","time":7760.29248046875,"vars":["x"]},{"bits":128,"conversions":[],"cost-accuracy":"((13632 63.00164235000605) (6720 0) ((6592 44.213851285683646 (+ (log1p n) -1.0)) (192 60.752153102532695 (+ n -1.0)) (64 63.00436070637669 -1.0)))","end":0,"end-est":0,"identifier":"#f","input":"(- (- (* (+ n 1.0) (log (+ n 1.0))) (* n (log n))) 1.0)","link":"14-logsexample38","name":"logs (example 3.8)","output":"(+ (log n) (/ 0.5 n))","pre":"(> n 6.8e+15)","prec":"binary64","preprocess":"()","spec":"(- (- (* (+ n 1.0) (log (+ n 1.0))) (* n (log n))) 1.0)","start":63.00164235000605,"start-est":63.00433664727923,"status":"eq-target","target":0,"target-prog":"(- (log (+ n 1.0)) (- (/ 1.0 (* 2.0 n)) (- (/ 1.0 (* 3.0 (* n n))) (/ 4.0 (pow n 3.0)))))","time":4077.47705078125,"vars":["n"]},{"bits":128,"conversions":[],"cost-accuracy":"((6848 58.47228687221808) (20352 0.168565240831908) ((13056 0.007625 (- (log1p (- eps)) (log1p eps))) (6848 0.36655941587929003 (* eps (fma -0.6666666666666666 (* eps eps) -2.0))) (704 0.3610960205290218 (+ (* -2.0 eps) (* eps (* -0.6666666666666666 (* eps eps))))) (192 0.7318837249503403 (* -2.0 eps))))","end":0.168565240831908,"end-est":0,"identifier":"#f","input":"(log (/ (- 1.0 eps) (+ 1.0 eps)))","link":"15-logqproblem343","name":"logq (problem 3.4.3)","output":"(+ (* -2.0 eps) (+ (* -0.4 (pow eps 5.0)) (+ (* -0.2857142857142857 (pow eps 7.0)) (* -0.6666666666666666 (pow eps 3.0)))))","pre":"TRUE","prec":"binary64","preprocess":"()","spec":"(log (/ (- 1.0 eps) (+ 1.0 eps)))","start":58.47228687221808,"start-est":59.19210214293537,"status":"eq-target","target":0.22719534341201159,"target-prog":"(* -2.0 (+ (+ eps (/ (pow eps 3.0) 3.0)) (/ (pow eps 5.0) 5.0)))","time":4827.371826171875,"vars":["eps"]},{"bits":128,"conversions":[],"cost-accuracy":"((6848 59.916888572855456) (19968 0.30097341386722415) ((704 0.3426134005123251 (/ (* x 0.1111111111111111) (+ 0.3333333333333333 (* -0.022222222222222223 (* x x))))) (576 0.41298295118927786 (* x (+ 0.3333333333333333 (* (* x x) 0.022222222222222223)))) (192 0.6847520603144931 (* x 0.3333333333333333))))","end":0.30097341386722415,"end-est":0.28253810651611583,"identifier":"#f","input":"(- (/ 1.0 x) (/ 1.0 (tan x)))","link":"16-invcotexample39","name":"invcot (example 3.9)","output":"(* (fma (pow x 4.0) -0.0004938271604938272 0.1111111111111111) (/ x (fma x (* x -0.022222222222222223) 0.3333333333333333)))","pre":"(and (< -0.026 x) (< x 0.026))","prec":"binary64","preprocess":"()","spec":"(- (/ 1.0 x) (/ 1.0 (tan x)))","start":59.916888572855456,"start-est":59.75153197110007,"status":"eq-target","target":0.08098175878737258,"target-prog":"(if (< (fabs x) 0.026) (* (/ x 3.0) (+ 1.0 (/ (* x x) 15.0))) (- (/ 1.0 x) (/ 1.0 (tan x))))","time":14794.093994140625,"vars":["x"]},{"bits":128,"conversions":[],"cost-accuracy":"((20544 60.359651504033764) (61384 0.4576006561133723) ((836 3.6916305419470166 (if (<= b 3.7086396788901195e+50) (+ (/ 1.0 a) (+ (/ 1.0 b) (* eps -0.5))) (if (<= b 1.15e+209) (/ (+ a b) (* a b)) (+ (/ 1.0 a) (* eps -0.5))))) (712 3.807567919463476 (if (<= b 3.7086396788901195e+50) (+ (/ 1.0 b) (/ 1.0 a)) (if (<= b 1.15e+209) (/ (+ a b) (* a b)) (+ (/ 1.0 a) (* eps -0.5))))) (580 4.9304776550739104 (if (<= a -8.240632500113435e+65) (/ 1.0 b) (/ (+ 1.0 (/ a b)) a))) (580 4.829152496412221 (if (<= a -8.240632500113435e+65) (+ (/ 1.0 b) (* eps -0.5)) (/ (+ 1.0 (/ a b)) a))) (580 3.4166738730023902 (if (<= a -4.792370662499683e-43) (/ (/ (+ a b) a) b) (/ (+ 1.0 (/ a b)) a))) (448 3.309192317651364 (+ (/ 1.0 b) (/ 1.0 a))) (324 13.769148970518732 (if (<= b 2.9444995838584976e-162) (/ 1.0 b) (/ 1.0 a))) (192 62.000574747521135 (* eps -0.5)) (192 32.84630501273784 (/ 1.0 a))))","end":0.4576006561133723,"end-est":2.77734375,"identifier":"#f","input":"(/ (* eps (- (exp (* (+ a b) eps)) 1.0)) (* (- (exp (* a eps)) 1.0) (- (exp (* b eps)) 1.0)))","link":"17-expq3problem342","name":"expq3 (problem 3.4.2)","output":"(if (<= (/ (* eps (+ (exp (* eps (+ a b))) -1.0)) (* (+ (exp (* eps a)) -1.0) (+ (exp (* eps b)) -1.0))) (- INFINITY)) (/ (+ 1.0 (/ a b)) a) (if (<= (/ (* eps (+ (exp (* eps (+ a b))) -1.0)) (* (+ (exp (* eps a)) -1.0) (+ (exp (* eps b)) -1.0))) 5e-15) (* eps (/ (/ (expm1 (* eps (+ a b))) (expm1 (* eps a))) (expm1 (* eps b)))) (+ (/ 1.0 b) (/ 1.0 a))))","pre":"(and (< -1.0 eps) (< eps 1.0))","prec":"binary64","preprocess":"((sort a b))","spec":"(/ (* eps (- (exp (* (+ a b) eps)) 1.0)) (* (- (exp (* a eps)) 1.0) (- (exp (* b eps)) 1.0)))","start":60.359651504033764,"start-est":59.07132398950641,"status":"gt-target","target":15.292985990905075,"target-prog":"(/ (+ a b) (* a b))","time":14617.5078125,"vars":["a","b","eps"]},{"bits":128,"conversions":[],"cost-accuracy":"((13120 41.01766985423279) (12992 0.39652124062518035) ((320 21.57674510660122 (+ 0.5 (/ 1.0 x))) (192 21.584083247352925 (/ 1.0 x))))","end":0.39652124062518035,"end-est":0.515625,"identifier":"#f","input":"(/ (exp x) (- (exp x) 1.0))","link":"18-expq2section311","name":"expq2 (section 3.11)","output":"(/ (exp x) (expm1 x))","pre":"TRUE","prec":"binary64","preprocess":"()","spec":"(/ (exp x) (- (exp x) 1.0))","start":41.01766985423279,"start-est":39.90505547248675,"status":"gt-target","target":40.6411063435216,"target-prog":"(/ 1.0 (- 1.0 (exp (- x))))","time":2873.3349609375,"vars":["x"]},{"bits":128,"conversions":[],"cost-accuracy":"((6592 58.61407121131456) (6464 0.001125) ())","end":0.001125,"end-est":0,"identifier":"#f","input":"(- (exp x) 1.0)","link":"19-expm1example37","name":"expm1 (example 3.7)","output":"(expm1 x)","pre":"(< -0.00017 x)","prec":"binary64","preprocess":"()","spec":"(- (exp x) 1.0)","start":58.61407121131456,"start-est":58.405230718678034,"status":"eq-target","target":0.46525587481073705,"target-prog":"(* x (+ (+ 1.0 (/ x 2.0)) (/ (* x x) 6.0)))","time":1721.515625,"vars":["x"]},{"bits":128,"conversions":[],"cost-accuracy":"((6720 29.21649384755605) (6592 0.016176524708533393) ((192 21.32293445464178 (* a x))))","end":0.016176524708533393,"end-est":0.030791574411569694,"identifier":"#f","input":"(- (exp (* a x)) 1.0)","link":"20-expaxsection35","name":"expax (section 3.5)","output":"(expm1 (* a x))","pre":"TRUE","prec":"binary64","preprocess":"()","spec":"(- (exp (* a x)) 1.0)","start":29.21649384755605,"start-est":28.07328319811768,"status":"eq-target","target":0.17543029883008035,"target-prog":"(if (< (fabs (* a x)) 0.1) (* (* a x) (+ 1.0 (+ (/ (* a x) 2.0) (/ (pow (* a x) 2.0) 6.0)))) (- (exp (* a x)) 1.0))","time":3139.55224609375,"vars":["a","x"]},{"bits":128,"conversions":[],"cost-accuracy":"((13184 29.2709101591008) (26176 0.6367966643199237) ((13184 0.7655922254037465 (fma x x (* 0.08333333333333333 (pow x 4.0)))) (6912 0.7695532183180179 (+ (* 0.08333333333333333 (pow x 4.0)) (* x x))) (192 1.1307927557265138 (* x x)) (128 60.20001613340166 (- x)) (64 60.21655913346369 x)))","end":0.6367966643199237,"end-est":0.8599661729477803,"identifier":"#f","input":"(+ (- (exp x) 2.0) (exp (- x)))","link":"21-exp2problem337","name":"exp2 (problem 3.3.7)","output":"(fma x x (fma 0.08333333333333333 (pow x 4.0) (* 0.002777777777777778 (pow x 6.0))))","pre":"TRUE","prec":"binary64","preprocess":"()","spec":"(+ (- (exp x) 2.0) (exp (- x)))","start":29.2709101591008,"start-est":32.40144337406491,"status":"eq-target","target":0.0431090234442608,"target-prog":"(* 4.0 (pow (sinh (/ x 2.0)) 2.0))","time":8009.69970703125,"vars":["x"]},{"bits":128,"conversions":[],"cost-accuracy":"((960 9.350534069882478) (8712 1.4043327026899648) ((1472 9.366112083588567 (+ (/ (+ (* x 0.5) -1.0) (* (* x -0.5) (+ x -1.0))) (/ (- 1.0 x) (- 1.0 (* x x))))) (960 9.350534069882478 (+ (+ (/ -2.0 x) (/ 1.0 (+ 1.0 x))) (/ 1.0 (+ x -1.0)))) (584 15.92658048954053 (if (<= x -158115409548.54633) (/ 2.0 (* x x)) (if (<= x 1.197694574261287e-15) (/ -2.0 x) (/ 2.0 (* x x))))) (448 10.212418615784657 (+ -1.0 (- 1.0 (/ 2.0 x)))) (192 61.74992239743988 (/ 1.0 x)) (192 31.0941355727332 (/ -2.0 x)) (64 61.904872668778395 -2.0)))","end":1.4043327026899648,"end-est":0.36657450170570877,"identifier":"#f","input":"(+ (- (/ 1.0 (+ x 1.0)) (/ 2.0 x)) (/ 1.0 (- x 1.0)))","link":"22-3fracproblem333","name":"3frac (problem 3.3.3)","output":"(if (<= (+ (+ (/ -2.0 x) (/ 1.0 (+ 1.0 x))) (/ 1.0 (+ x -1.0))) -1e+15) (/ -2.0 x) (if (<= (+ (+ (/ -2.0 x) (/ 1.0 (+ 1.0 x))) (/ 1.0 (+ x -1.0))) 0.0) (/ 2.0 (pow x 3.0)) (/ (+ (* (* x -0.5) (- -1.0 x)) (* (- 1.0 x) (- 1.0 (* x -0.5)))) (* (- 1.0 x) (* (* x -0.5) (+ 1.0 x))))))","pre":"TRUE","prec":"binary64","preprocess":"()","spec":"(+ (- (/ 1.0 (+ x 1.0)) (/ 2.0 x)) (/ 1.0 (- x 1.0)))","start":9.350534069882478,"start-est":9.048989742527732,"status":"lt-target","target":0.2830948159949141,"target-prog":"(/ 2.0 (* x (- (* x x) 1.0)))","time":8118.22314453125,"vars":["x"]},{"bits":128,"conversions":[],"cost-accuracy":"((13120 37.222026416911504) (65544 0.38737367072347134) ((45892 0.6444020904608287 (if (<= eps -3.7815510540868806e-9) (- (/ (+ (tan x) (tan eps)) (- 1.0 (/ (/ (* (sin x) (sin eps)) (cos x)) (cos eps)))) (tan x)) (if (<= eps 2.574731398390623e-22) (+ eps (* eps (/ (pow (sin x) 2.0) (pow (cos x) 2.0)))) (fma (+ (tan x) (tan eps)) (/ 1.0 (- 1.0 (* (tan x) (tan eps)))) (- (tan x)))))) (39432 0.6316993917485648 (if (<= eps -3.7815510540868806e-9) (- (/ (+ (tan x) (tan eps)) (- 1.0 (* (tan x) (tan eps)))) (tan x)) (if (<= eps 2.574731398390623e-22) (+ eps (* eps (/ (pow (sin x) 2.0) (pow (cos x) 2.0)))) (fma (+ (tan x) (tan eps)) (/ 1.0 (- 1.0 (* (tan x) (tan eps)))) (- (tan x)))))) (39432 0.6382436143162856 (if (<= eps -3.7815510540868806e-9) (- (/ (+ (tan x) (tan eps)) (- 1.0 (/ (* (tan eps) (sin x)) (cos x)))) (tan x)) (if (<= eps 2.574731398390623e-22) (+ eps (* eps (/ (pow (sin x) 2.0) (pow (cos x) 2.0)))) (fma (+ (tan x) (tan eps)) (/ 1.0 (- 1.0 (* (tan x) (tan eps)))) (- (tan x)))))) (39432 0.6386338556101177 (if (<= eps -3.7815510540868806e-9) (- (/ (+ (tan x) (tan eps)) (- 1.0 (/ (* (tan x) (sin eps)) (cos eps)))) (tan x)) (if (<= eps 2.574731398390623e-22) (+ eps (* eps (/ (pow (sin x) 2.0) (pow (cos x) 2.0)))) (fma (+ (tan x) (tan eps)) (/ 1.0 (- 1.0 (* (tan x) (tan eps)))) (- (tan x)))))) (39304 0.6248879201655244 (if (<= eps -3.7815510540868806e-9) (- (/ (+ (tan x) (tan eps)) (- 1.0 (* (tan x) (tan eps)))) (tan x)) (if (<= eps 2.574731398390623e-22) (+ eps (* eps (/ (pow (sin x) 2.0) (pow (cos x) 2.0)))) (- (/ (- (+ (tan x) (tan eps))) (fma (tan x) (tan eps) -1.0)) (tan x))))) (32968 0.6288162691645518 (if (<= eps -3.7815510540868806e-9) (- (/ (+ (tan x) (tan eps)) (- 1.0 (* (tan x) (tan eps)))) (tan x)) (if (<= eps 2.574731398390623e-22) (+ eps (* eps (/ (pow (sin x) 2.0) (pow (cos x) 2.0)))) (- (/ (+ (tan x) (tan eps)) (- 1.0 (* (tan x) (tan eps)))) (tan x))))) (26440 14.590480362940264 (if (<= eps -934.9957668837077) (tan eps) (if (<= eps 3.607335253053562e-9) (* eps (+ 1.0 (/ (pow (sin x) 2.0) (pow (cos x) 2.0)))) (- (+ (tan x) (tan eps)) (tan x))))) (26440 14.56381258557418 (if (<= eps -934.9957668837077) (tan eps) (if (<= eps 3.607335253053562e-9) (+ eps (* eps (/ (pow (sin x) 2.0) (pow (cos x) 2.0)))) (- (+ (tan x) (tan eps)) (tan x))))) (6464 26.943959900154603 (tan eps)) (64 44.07881747117531 eps)))","end":0.38737367072347134,"end-est":0.24964265115728565,"identifier":"#f","input":"(- (tan (+ x eps)) (tan x))","link":"23-2tanproblem332","name":"2tan (problem 3.3.2)","output":"(if (<= eps -0.004205227708458556) (- (/ (+ (tan x) (tan eps)) (- 1.0 (/ (/ (* (sin x) (sin eps)) (cos x)) (cos eps)))) (tan x)) (if (<= eps 3.607335253053562e-9) (fma (* eps eps) (+ (/ (sin x) (cos x)) (pow (/ (sin x) (cos x)) 3.0)) (+ eps (* eps (/ (pow (sin x) 2.0) (pow (cos x) 2.0))))) (- (/ (- (+ (tan x) (tan eps))) (fma (tan x) (tan eps) -1.0)) (tan x))))","pre":"TRUE","prec":"binary64","preprocess":"()","spec":"(- (tan (+ x eps)) (tan x))","start":37.222026416911504,"start-est":36.4739720860774,"status":"gt-target","target":15.10763122312818,"target-prog":"(/ (sin eps) (* (cos x) (cos (+ x eps))))","time":18278.706787109375,"vars":["x","eps"]},{"bits":128,"conversions":[],"cost-accuracy":"((13120 30.06639183887003) (13248 0.1549505640636719) ((26308 0.44227125594990996 (if (<= (- (sqrt (+ 1.0 x)) (sqrt x)) 0.0001) (/ 1.0 (+ (sqrt x) (sqrt x))) (- (sqrt (+ 1.0 x)) (sqrt x)))) (13252 1.158098942581409 (if (<= x 0.0023813981322523565) (+ 1.0 (- (* x 0.5) (sqrt x))) (/ 1.0 (+ (sqrt x) (sqrt x))))) (6976 30.3816604214021 (/ 1.0 (+ (sqrt x) (+ 1.0 (* x 0.5))))) (6848 31.18676193021292 (+ 1.0 (- (* x 0.5) (sqrt x)))) (64 31.40572909570218 1.0)))","end":0.1549505640636719,"end-est":0.16863251953688402,"identifier":"#f","input":"(- (sqrt (+ x 1.0)) (sqrt x))","link":"24-2sqrtexample31","name":"2sqrt (example 3.1)","output":"(/ 1.0 (+ (sqrt (+ 1.0 x)) (sqrt x)))","pre":"TRUE","prec":"binary64","preprocess":"()","spec":"(- (sqrt (+ x 1.0)) (sqrt x))","start":30.06639183887003,"start-est":31.543168923530864,"status":"eq-target","target":0.1549505640636719,"target-prog":"(/ 1.0 (+ (sqrt (+ x 1.0)) (sqrt x)))","time":5190.31982421875,"vars":["x"]},{"bits":128,"conversions":[],"cost-accuracy":"((13120 37.284543868008754) (39040 0.20866911626832874) ((32448 0.3779039888772758 (fma (sin eps) (cos x) (* (sin x) (+ (cos eps) -1.0)))) (32448 0.3803282235435388 (fma (+ (cos eps) -1.0) (sin x) (* (sin eps) (cos x)))) (26176 0.3898615531600917 (+ (* (sin eps) (cos x)) (* (sin x) (+ (cos eps) -1.0)))) (19520 14.260955755331887 (fma (sin eps) (cos x) (- x x))) (13640 14.577696992351013 (if (<= eps -118.26461522098978) (- (sin eps) (sin x)) (if (<= eps 0.01527960149338504) (* eps (+ (cos x) (* (sin x) (* eps -0.5)))) (- (sin eps) (sin x))))) (13632 15.003394588033595 (* 2.0 (* (cos (* 0.5 (- eps (* x -2.0)))) (sin (* eps 0.5))))) (13256 14.74239580788298 (if (<= eps -118.26461522098978) (- (sin eps) (sin x)) (if (<= eps 0.01527960149338504) (* eps (cos x)) (- (sin eps) (sin x))))) (6856 15.140556199152917 (if (<= eps -118.26461522098978) (sin eps) (if (<= eps 0.01527960149338504) (* eps (cos x)) (sin eps)))) (6464 29.07703513450489 (sin eps)) (64 61.68354567593469 x) (64 61.28470082312062 0.0) (64 45.45650226620507 eps)))","end":0.20866911626832874,"end-est":0.16724133277819153,"identifier":"#f","input":"(- (sin (+ x eps)) (sin x))","link":"25-2sinexample33","name":"2sin (example 3.3)","output":"(fma (sin eps) (cos x) (* (* (sin eps) (tan (/ eps 2.0))) (- (sin x))))","pre":"TRUE","prec":"binary64","preprocess":"()","spec":"(- (sin (+ x eps)) (sin x))","start":37.284543868008754,"start-est":34.805851417259774,"status":"gt-target","target":14.997120821724918,"target-prog":"(* 2.0 (* (cos (+ x (/ eps 2.0))) (sin (/ eps 2.0))))","time":11370.394287109375,"vars":["x","eps"]},{"bits":128,"conversions":[],"cost-accuracy":"((13376 20.168417064172512) (26692 0.19287534017261224) ((13888 0.4880088375223574 (* (/ 1.0 x) (/ (/ 1.0 (+ 1.0 x)) (+ (pow x -0.5) (pow (+ 1.0 x) -0.5))))) (13760 0.7735509671410756 (/ 1.0 (* (+ 1.0 x) (* x (+ (pow x -0.5) (pow (+ 1.0 x) -0.5)))))) (7556 0.577438685992005 (if (<= x 0.06588527500348274) (+ (pow x -0.5) (/ -1.0 (+ 1.0 (* x 0.5)))) (* (/ (pow x -0.5) x) (+ 0.5 (+ (/ 0.3125 (* x x)) (/ -0.375 x)))))) (7172 1.005813790790916 (if (<= x 0.06588527500348274) (+ (pow x -0.5) (/ -1.0 (+ 1.0 (* x 0.5)))) (* (/ (pow x -0.5) x) 0.5))) (7172 0.7026505954355103 (if (<= x 0.06588527500348274) (+ (pow x -0.5) (/ -1.0 (+ 1.0 (* x 0.5)))) (* (/ (pow x -0.5) x) (+ 0.5 (/ -0.375 x))))) (7044 1.0153836205041968 (if (<= x 0.06588527500348274) (+ (+ (pow x -0.5) (* x 0.5)) -1.0) (* (/ (pow x -0.5) x) 0.5))) (6916 1.523581711003333 (if (<= x 0.06588527500348274) (+ (pow x -0.5) -1.0) (/ 1.0 (* 2.0 (pow x 1.5))))) (6916 1.1549112810734803 (if (<= x 0.06588527500348274) (+ (pow x -0.5) -1.0) (* (/ (pow x -0.5) x) 0.5))) (6788 30.102486901315935 (if (<= x 0.06588527500348274) (+ (pow x -0.5) -1.0) (/ 1.0 x))) (6720 30.44440727130448 (/ 1.0 (+ x (sqrt x)))) (6528 31.705124173742362 (pow x -0.5)) (192 59.28579337991986 (/ 1.0 x)) (64 62.766810920528286 -1.0)))","end":0.19287534017261224,"end-est":0.08984375,"identifier":"#f","input":"(- (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (+ x 1.0))))","link":"26-2isqrtexample36","name":"2isqrt (example 3.6)","output":"(if (<= (+ (/ 1.0 (sqrt x)) (/ -1.0 (sqrt (+ 1.0 x)))) 5e-10) (* (/ (pow x -0.5) x) (+ 0.5 (+ (/ 0.3125 (* x x)) (/ -0.375 x)))) (- (pow x -0.5) (pow (+ 1.0 x) -0.5)))","pre":"TRUE","prec":"binary64","preprocess":"()","spec":"(- (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (+ x 1.0))))","start":20.168417064172512,"start-est":20.397826235808715,"status":"eq-target","target":0.6345836733871089,"target-prog":"(/ 1.0 (+ (* (+ x 1.0) (sqrt x)) (* x (sqrt (+ x 1.0)))))","time":8968.536865234375,"vars":["x"]},{"bits":128,"conversions":[],"cost-accuracy":"((13120 15.07132183802911) (6912 0.42495506698642194) ((6784 1.7439690473749636 (atan2 1.0 (+ 1.0 (* N N)))) (6656 30.411544827522473 (atan2 1.0 (+ 1.0 N)))))","end":0.42495506698642194,"end-est":0.3856140349766052,"identifier":"#f","input":"(- (atan (+ N 1.0)) (atan N))","link":"27-2atanexample35","name":"2atan (example 3.5)","output":"(atan2 1.0 (+ 1.0 (* N (+ 1.0 N))))","pre":"TRUE","prec":"binary64","preprocess":"()","spec":"(- (atan (+ N 1.0)) (atan N))","start":15.07132183802911,"start-est":15.866090240824652,"status":"eq-target","target":0.4265800669864219,"target-prog":"(atan (/ 1.0 (+ 1.0 (* N (+ N 1.0)))))","time":5546.398193359375,"vars":["N"]}]}